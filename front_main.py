"""
HAVEN Crowdfunding Platform - Complete Streamlit Frontend
Updated for Render Python3 Runtime with Environment Variables
Enhanced with 4-language translation and term simplification
"""

import streamlit as st
import requests
import json
import asyncio
import time
import os
from typing import Dict, List, Optional
import pandas as pd
from datetime import datetime

# Configure Streamlit page
st.set_page_config(
    page_title="HAVEN Crowdfunding Platform",
    page_icon="ЁЯПа",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ========================================
# CONFIGURATION FROM ENVIRONMENT VARIABLES
# ========================================

# Backend Configuration
BACKEND_URL = os.getenv("BACKEND_URL", "https://haven-fastapi-backend.onrender.com")
FRONTEND_BASE_URI = os.getenv("FRONTEND_BASE_URI", "https://haven-streamlit-frontend.onrender.com")

# OAuth Configuration
GOOGLE_CLIENT_ID = os.getenv("OAUTH_GOOGLE_CLIENT_ID", os.getenv("GOOGLE_CLIENT_ID"))
GOOGLE_CLIENT_SECRET = os.getenv("OAUTH_GOOGLE_CLIENT_SECRET", os.getenv("GOOGLE_CLIENT_SECRET"))
FACEBOOK_APP_ID = os.getenv("OAUTH_FACEBOOK_APP_ID", os.getenv("FACEBOOK_CLIENT_ID"))
FACEBOOK_APP_SECRET = os.getenv("OAUTH_FACEBOOK_APP_SECRET", os.getenv("FACEBOOK_CLIENT_SECRET"))

# Feature Flags
TRANSLATION_ENABLED = os.getenv("FEATURES_TRANSLATION_ENABLED", "true").lower() == "true"
SIMPLIFICATION_ENABLED = os.getenv("FEATURES_SIMPLIFICATION_ENABLED", "true").lower() == "true"
OAUTH_ENABLED = os.getenv("FEATURES_OAUTH_ENABLED", "true").lower() == "true"
ANALYTICS_ENABLED = os.getenv("FEATURES_ANALYTICS_ENABLED", "true").lower() == "true"

# Session Configuration
SESSION_SECRET_KEY = os.getenv("SESSION_SECRET_KEY", "default-secret-key")
SESSION_MAX_AGE = int(os.getenv("SESSION_MAX_AGE", "3600"))

# Performance Settings
CACHE_TTL = int(os.getenv("PERFORMANCE_CACHE_TTL", "3600"))
MAX_REQUESTS_PER_MINUTE = int(os.getenv("PERFORMANCE_MAX_REQUESTS_PER_MINUTE", "60"))
API_TIMEOUT = int(os.getenv("PERFORMANCE_API_TIMEOUT", "30"))

# Translation Settings
TRANSLATION_CACHE_TTL = int(os.getenv("TRANSLATION_CACHE_TTL", "3600"))
TRANSLATION_BATCH_SIZE = int(os.getenv("TRANSLATION_BATCH_SIZE", "8"))
TRANSLATION_MAX_LENGTH = int(os.getenv("TRANSLATION_MAX_TEXT_LENGTH", "5000"))
TRANSLATION_DEFAULT_LANGUAGE = os.getenv("TRANSLATION_DEFAULT_LANGUAGE", "en")

# Simplification Settings
SIMPLIFICATION_CACHE_TTL = int(os.getenv("SIMPLIFICATION_CACHE_TTL", "7200"))
SIMPLIFICATION_DEFAULT_LEVEL = os.getenv("SIMPLIFICATION_DEFAULT_LEVEL", "simple")

# Environment Detection
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

# ========================================
# TRANSLATIONS DICTIONARY
# ========================================

TRANSLATIONS = {
    'English': {
        'title': 'HAVEN',
        'subtitle': 'Crowdfunding Platform',
        'login': 'Login',
        'register': 'Register',
        'email': 'Email',
        'password': 'Password',
        'confirm_password': 'Confirm Password',
        'continue': 'Continue',
        'not_registered': 'Not registered?',
        'create_account': 'Create an account',
        'already_have_account': 'Already have an account?',
        'sign_in_here': 'Sign in here',
        'sign_in_google': 'Sign in with Google',
        'sign_in_facebook': 'Sign in with Facebook',
        'individual': 'Individual',
        'organization': 'Organization',
        'full_name': 'Full Name',
        'organization_name': 'Organization Name',
        'phone': 'Phone Number',
        'address': 'Address',
        'registration_type': 'Registration Type',
        'home': 'Home',
        'explore': 'Explore',
        'search': 'Search',
        'profile': 'Profile',
        'logout': 'Logout',
        'welcome_banner_text': 'HAVEN',
        'welcome_banner_tagline': 'Help not just some people, but Help Humanity.',
        'trending_campaigns': 'Trending Campaigns',
        'categories': 'Categories',
        'technology': 'Technology',
        'health': 'Health',
        'education': 'Education',
        'environment': 'Environment',
        'arts': 'Arts & Culture',
        'community': 'Community',
        'search_campaigns': 'Search Campaigns',
        'search_placeholder': 'Enter keywords to search for campaigns...',
        'search_tips': 'Search Tips',
        'use_keywords': 'Use specific keywords related to the campaign',
        'filter_category': 'Filter by category for better results',
        'check_spelling': 'Check spelling and try different terms',
        'register_individual': 'Register as an Individual',
        'register_organization': 'Register as an Organization',
        'organization_type': 'Organization Type',
        'ngo': 'NGO',
        'startup': 'Startup',
        'charity': 'Charity'
    },
    'Hindi': {
        'title': 'рд╣реЗрд╡рди',
        'subtitle': 'рдХреНрд░рд╛рдЙрдбрдлрдВрдбрд┐рдВрдЧ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо',
        'login': 'рд▓реЙрдЧрд┐рди',
        'register': 'рд░рдЬрд┐рд╕реНрдЯрд░',
        'email': 'рдИрдореЗрд▓',
        'password': 'рдкрд╛рд╕рд╡рд░реНрдб',
        'confirm_password': 'рдкрд╛рд╕рд╡рд░реНрдб рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
        'continue': 'рдЬрд╛рд░реА рд░рдЦреЗрдВ',
        'not_registered': 'рдкрдВрдЬреАрдХреГрдд рдирд╣реАрдВ рд╣реИрдВ?',
        'create_account': 'рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ',
        'already_have_account': 'рдкрд╣рд▓реЗ рд╕реЗ рдЦрд╛рддрд╛ рд╣реИ?',
        'sign_in_here': 'рдпрд╣рд╛рдБ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
        'sign_in_google': 'Google рд╕реЗ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
        'sign_in_facebook': 'Facebook рд╕реЗ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
        'individual': 'рд╡реНрдпрдХреНрддрд┐рдЧрдд',
        'organization': 'рд╕рдВрдЧрдарди',
        'full_name': 'рдкреВрд░рд╛ рдирд╛рдо',
        'organization_name': 'рд╕рдВрдЧрдарди рдХрд╛ рдирд╛рдо',
        'phone': 'рдлреЛрди рдирдВрдмрд░',
        'address': 'рдкрддрд╛',
        'registration_type': 'рдкрдВрдЬреАрдХрд░рдг рдкреНрд░рдХрд╛рд░',
        'home': 'рд╣реЛрдо',
        'explore': 'рдПрдХреНрд╕рдкреНрд▓реЛрд░',
        'search': 'рдЦреЛрдЬреЗрдВ',
        'profile': 'рдкреНрд░реЛрдлрд╛рдЗрд▓',
        'logout': 'рд▓реЙрдЧрдЖрдЙрдЯ',
        'welcome_banner_text': 'рд╣реЗрд╡рди',
        'welcome_banner_tagline': 'рд╕рд┐рд░реНрдл рдХреБрдЫ рд▓реЛрдЧреЛрдВ рдХреА рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ рдорд╛рдирд╡рддрд╛ рдХреА рдорджрдж рдХрд░реЗрдВред',
        'trending_campaigns': 'рдЯреНрд░реЗрдВрдбрд┐рдВрдЧ рдХреИрдВрдкреЗрди',
        'categories': 'рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ',
        'technology': 'рддрдХрдиреАрдХ',
        'health': 'рд╕реНрд╡рд╛рд╕реНрдереНрдп',
        'education': 'рд╢рд┐рдХреНрд╖рд╛',
        'environment': 'рдкрд░реНрдпрд╛рд╡рд░рдг',
        'arts': 'рдХрд▓рд╛ рдФрд░ рд╕рдВрд╕реНрдХреГрддрд┐',
        'community': 'рд╕рдореБрджрд╛рдп',
        'search_campaigns': 'рдХреИрдВрдкреЗрди рдЦреЛрдЬреЗрдВ',
        'search_placeholder': 'рдХреИрдВрдкреЗрди рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдХреАрд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ...',
        'search_tips': 'рдЦреЛрдЬ рд╕реБрдЭрд╛рд╡',
        'use_keywords': 'рдХреИрдВрдкреЗрди рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреАрд╡рд░реНрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
        'filter_category': 'рдмреЗрд╣рддрд░ рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рд╢реНрд░реЗрдгреА рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЗрдВ',
        'check_spelling': 'рд╡рд░реНрддрдиреА рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдЕрд▓рдЧ рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ',
        'register_individual': 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рдХреЗ рд░реВрдк рдореЗрдВ рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ',
        'register_organization': 'рд╕рдВрдЧрдарди рдХреЗ рд░реВрдк рдореЗрдВ рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ',
        'organization_type': 'рд╕рдВрдЧрдарди рдкреНрд░рдХрд╛рд░',
        'ngo': 'рдПрдирдЬреАрдУ',
        'startup': 'рд╕реНрдЯрд╛рд░реНрдЯрдЕрдк',
        'charity': 'рдЪреИрд░рд┐рдЯреА'
    },
    'Tamil': {
        'title': 'ро╣рпЗро╡ройрпН',
        'subtitle': 'роХрпНро░ро╡рпБроЯрпНроГрокрогрпНроЯро┐роЩрпН родро│роорпН',
        'login': 'роЙро│рпНроирпБро┤рпИро╡рпБ',
        'register': 'рокродро┐ро╡рпБ',
        'email': 'рооро┐ройрпНройроЮрпНроЪро▓рпН',
        'password': 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпН',
        'confirm_password': 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро╡рпБроорпН',
        'continue': 'родрпКроЯро░ро╡рпБроорпН',
        'not_registered': 'рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИропро╛?',
        'create_account': 'роХрогроХрпНроХрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН',
        'already_have_account': 'роПро▒рпНроХройро╡рпЗ роХрогроХрпНроХрпБ роЙро│рпНро│родро╛?',
        'sign_in_here': 'роЗроЩрпНроХрпЗ роЙро│рпНроирпБро┤рпИропро╡рпБроорпН',
        'sign_in_google': 'Google роЙроЯройрпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН',
        'sign_in_facebook': 'Facebook роЙроЯройрпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН',
        'individual': 'родройро┐роирокро░рпН',
        'organization': 'роЕроорпИрокрпНрокрпБ',
        'full_name': 'роорпБро┤рпБ рокрпЖропро░рпН',
        'organization_name': 'роЕроорпИрокрпНрокро┐ройрпН рокрпЖропро░рпН',
        'phone': 'родрпКро▓рпИрокрпЗроЪро┐ роОрогрпН',
        'address': 'роорпБроХро╡ро░ро┐',
        'registration_type': 'рокродро┐ро╡рпБ ро╡роХрпИ',
        'home': 'роорпБроХрокрпНрокрпБ',
        'explore': 'роЖро░ро╛ропро╡рпБроорпН',
        'search': 'родрпЗроЯро╡рпБроорпН',
        'profile': 'роЪрпБропро╡ро┐ро╡ро░роорпН',
        'logout': 'ро╡рпЖро│ро┐ропрпЗро▒ро╡рпБроорпН',
        'welcome_banner_text': 'ро╣рпЗро╡ройрпН',
        'welcome_banner_tagline': 'роЪро┐ро▓ роороХрпНроХро│рпБроХрпНроХрпБ роороЯрпНроЯрпБрооро▓рпНро▓, рооройро┐родроХрпБро▓родрпНродро┐ро▒рпНроХрпБ роЙродро╡рпБроЩрпНроХро│рпН.',
        'trending_campaigns': 'рокро┐ро░рокро▓рооро╛рой рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпН',
        'categories': 'ро╡роХрпИроХро│рпН',
        'technology': 'родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроорпН',
        'health': 'роЪрпБроХро╛родро╛ро░роорпН',
        'education': 'роХро▓рпНро╡ро┐',
        'environment': 'роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН',
        'arts': 'роХро▓рпИ рооро▒рпНро▒рпБроорпН роХро▓ро╛роЪрпНроЪро╛ро░роорпН',
        'community': 'роЪроорпВроХроорпН',
        'search_campaigns': 'рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпИродрпН родрпЗроЯро╡рпБроорпН',
        'search_placeholder': 'рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпИродрпН родрпЗроЯ роорпБроХрпНроХро┐роп ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН...',
        'search_tips': 'родрпЗроЯро▓рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
        'use_keywords': 'рокро┐ро░роЪрпНроЪро╛ро░родрпНродрпБроЯройрпН родрпКроЯро░рпНрокрпБроЯрпИроп роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роорпБроХрпНроХро┐роп ро╡ро╛ро░рпНродрпНродрпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН',
        'filter_category': 'роЪро┐ро▒роирпНрод роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ ро╡роХрпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН ро╡роЯро┐роХроЯрпНроЯро╡рпБроорпН',
        'check_spelling': 'роОро┤рпБродрпНродрпБрокрпНрокро┐ро┤рпИропрпИроЪрпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБ ро╡рпЖро╡рпНро╡рпЗро▒рпБ роЪрпКро▒рпНроХро│рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН',
        'register_individual': 'родройро┐роирокро░ро╛роХ рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН',
        'register_organization': 'роЕроорпИрокрпНрокро╛роХ рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН',
        'organization_type': 'роЕроорпИрокрпНрокрпБ ро╡роХрпИ',
        'ngo': 'роОройрпНроЬро┐роУ',
        'startup': 'ро╕рпНроЯро╛ро░рпНроЯрпНроЕрокрпН',
        'charity': 'родрпКрогрпНроЯрпБ'
    },
    'Telugu': {
        'title': 'р░╣р▒Зр░╡р▒Жр░ир▒Н',
        'subtitle': 'р░Хр▒Нр░░р▒Мр░бр▒НтАМр░лр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░▓р░╛р░Яр▒НтАМр░лр░╛р░░р░ор▒Н',
        'login': 'р░▓р░╛р░Чр░┐р░ир▒Н',
        'register': 'р░░р░┐р░Ьр░┐р░╕р▒Нр░Яр░░р▒Н',
        'email': 'р░Зр░ор▒Жр░пр░┐р░▓р▒Н',
        'password': 'р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒Н',
        'confirm_password': 'р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒НтАМр░ир▒Б р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐',
        'continue': 'р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър▒Б',
        'not_registered': 'р░ир░ор▒Лр░жр▒Б р░Хр░╛р░▓р▒Зр░жр░╛?',
        'create_account': 'р░Цр░╛р░др░╛ р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐',
        'already_have_account': 'р░Зр░кр▒Нр░кр░Яр░┐р░Хр▒З р░Цр░╛р░др░╛ р░Йр░Вр░жр░╛?',
        'sign_in_here': 'р░Зр░Хр▒Нр░Хр░б р░╕р▒Ир░ир▒Н р░Зр░ир▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'sign_in_google': 'Google р░др▒Л р░╕р▒Ир░ир▒Н р░Зр░ир▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'sign_in_facebook': 'Facebook р░др▒Л р░╕р▒Ир░ир▒Н р░Зр░ир▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'individual': 'р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д',
        'organization': 'р░╕р░Вр░╕р▒Нр░е',
        'full_name': 'р░кр▒Вр░░р▒Нр░др░┐ р░кр▒Зр░░р▒Б',
        'organization_name': 'р░╕р░Вр░╕р▒Нр░е р░кр▒Зр░░р▒Б',
        'phone': 'р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н',
        'address': 'р░Ър░┐р░░р▒Бр░ир░╛р░ор░╛',
        'registration_type': 'р░ир░ор▒Лр░жр▒Б р░░р░Хр░В',
        'home': 'р░╣р▒Лр░ор▒Н',
        'explore': 'р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐',
        'search': 'р░╡р▒Жр░др░Хр░Вр░бр░┐',
        'profile': 'р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н',
        'logout': 'р░▓р░╛р░Чр▒Нр░Ер░╡р▒Бр░Яр▒Н',
        'welcome_banner_text': 'р░╣р▒Зр░╡р▒Жр░ир▒Н',
        'welcome_banner_tagline': 'р░Хр▒Зр░╡р░▓р░В р░Хр▒Кр░Вр░др░ор░Вр░жр░┐р░Хр░┐ р░Хр░╛р░Хр▒Бр░Вр░бр░╛, р░ор░╛р░ир░╡р░др▒Нр░╡р░╛р░ир░┐р░Хр░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Вр░бр░┐.',
        'trending_campaigns': 'р░Яр▒Нр░░р▒Жр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р▒Б',
        'categories': 'р░╡р░░р▒Нр░Чр░╛р░▓р▒Б',
        'technology': 'р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░д',
        'health': 'р░Жр░░р▒Лр░Чр▒Нр░пр░В',
        'education': 'р░╡р░┐р░жр▒Нр░п',
        'environment': 'р░кр░░р▒Нр░пр░╛р░╡р░░р░гр░В',
        'arts': 'р░Хр░│р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░┐',
        'community': 'р░╕р░ор░╛р░Ьр░В',
        'search_campaigns': 'р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р░ир▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐',
        'search_placeholder': 'р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р░ир▒Б р░╡р▒Жр░др░Хр░бр░╛р░ир░┐р░Хр░┐ р░Хр▒Ар░▓р░Х р░кр░жр░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐...',
        'search_tips': 'р░╡р▒Жр░др▒Бр░Хр▒Бр░▓р░╛р░Я р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б',
        'use_keywords': 'р░кр▒Нр░░р░Ър░╛р░░р░╛р░ир░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░Хр▒Ар░▓р░Х р░кр░жр░╛р░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐',
        'filter_category': 'р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░лр░▓р░┐р░др░╛р░▓ р░Хр▒Лр░╕р░В р░╡р░░р▒Нр░Чр░В р░жр▒Нр░╡р░╛р░░р░╛ р░лр░┐р░▓р▒Нр░Яр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'check_spelling': 'р░╕р▒Нр░кр▒Жр░▓р▒Нр░▓р░┐р░Вр░Чр▒Н р░др░ир░┐р░Цр▒А р░Ър▒Зр░╕р░┐ р░╡р▒Зр░░р▒З р░кр░жр░╛р░▓р░ир▒Б р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐',
        'register_individual': 'р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░др░Вр░Чр░╛ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Вр░бр░┐',
        'register_organization': 'р░╕р░Вр░╕р▒Нр░ер░Чр░╛ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Вр░бр░┐',
        'organization_type': 'р░╕р░Вр░╕р▒Нр░е р░░р░Хр░В',
        'ngo': 'р░Ор░ир▒НтАМр░Ьр░┐р░У',
        'startup': 'р░╕р▒Нр░Яр░╛р░░р▒Нр░Яр░кр▒Н',
        'charity': 'р░жр░╛р░др▒Гр░др▒Нр░╡р░В'
    }
}

# Language configuration
SUPPORTED_LANGUAGES = {
    "en": {"name": "English", "flag": "ЁЯЗ║ЁЯЗ╕", "native": "English"},
    "hi": {"name": "Hindi", "flag": "ЁЯЗоЁЯЗ│", "native": "рд╣рд┐рдиреНрджреА"},
    "ta": {"name": "Tamil", "flag": "ЁЯЗоЁЯЗ│", "native": "родрооро┐ро┤рпН"},
    "te": {"name": "Telugu", "flag": "ЁЯЗоЁЯЗ│", "native": "р░др▒Жр░▓р▒Бр░Чр▒Б"}
}

# ========================================
# CUSTOM CSS FOR LIGHT GREEN THEME
# ========================================

st.markdown("""
<style>
    /* Main theme colors */
    .main {
        background-color: #f1f8e9;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background-color: #e8f5e8;
    }
    
    /* Header styling */
    .main-header {
        background: linear-gradient(90deg, #4caf50, #66bb6a);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    /* Translation bar styling */
    .translation-bar {
        background-color: #c8e6c9;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4caf50;
        margin-bottom: 1rem;
    }
    
    /* Feature card styling */
    .feature-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #4caf50;
        margin-bottom: 1rem;
    }
    
    /* Button styling */
    .stButton > button {
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
    
    .stButton > button:hover {
        background-color: #45a049;
    }
    
    /* Environment indicator */
    .env-indicator {
        position: fixed;
        top: 10px;
        right: 10px;
        background-color: #4caf50;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 3px;
        font-size: 0.8rem;
        z-index: 1000;
    }
</style>
""", unsafe_allow_html=True)

# Environment indicator (for debugging)
if DEBUG_MODE:
    st.markdown(f"""
    <div class="env-indicator">
        ENV: {ENVIRONMENT} | DEBUG: {DEBUG_MODE}
    </div>
    """, unsafe_allow_html=True)

# ========================================
# SESSION STATE INITIALIZATION
# ========================================

if 'current_language' not in st.session_state:
    st.session_state.current_language = TRANSLATION_DEFAULT_LANGUAGE
if 'translation_enabled' not in st.session_state:
    st.session_state.translation_enabled = TRANSLATION_ENABLED
if 'simplification_enabled' not in st.session_state:
    st.session_state.simplification_enabled = SIMPLIFICATION_ENABLED
if 'user_authenticated' not in st.session_state:
    st.session_state.user_authenticated = False

# ========================================
# UTILITY FUNCTIONS
# ========================================

def validate_configuration():
    """Validate that required environment variables are set"""
    required_vars = {
        "BACKEND_URL": BACKEND_URL,
        "OAUTH_GOOGLE_CLIENT_ID": GOOGLE_CLIENT_ID,
        "OAUTH_FACEBOOK_APP_ID": FACEBOOK_APP_ID,
        "SESSION_SECRET_KEY": SESSION_SECRET_KEY
    }
    
    missing_vars = []
    for var_name, var_value in required_vars.items():
        if not var_value or var_value == "your-actual-secret":
            missing_vars.append(var_name)
    
    if missing_vars:
        st.error(f"тЪая╕П Missing required environment variables: {', '.join(missing_vars)}")
        st.info("Please configure these variables in your Render environment group.")
        return False
    
    return True

def show_configuration():
    """Display current configuration (for debugging)"""
    if DEBUG_MODE:
        with st.expander("ЁЯФз Configuration (Debug Mode)"):
            st.json({
                "backend_url": BACKEND_URL,
                "translation_enabled": TRANSLATION_ENABLED,
                "simplification_enabled": SIMPLIFICATION_ENABLED,
                "oauth_enabled": OAUTH_ENABLED,
                "environment": ENVIRONMENT,
                "cache_ttl": CACHE_TTL,
                "google_client_id": GOOGLE_CLIENT_ID[:20] + "..." if GOOGLE_CLIENT_ID else "Not set",
                "facebook_app_id": FACEBOOK_APP_ID[:10] + "..." if FACEBOOK_APP_ID else "Not set"
            })

def make_api_request(endpoint: str, method: str = "GET", data: Dict = None) -> Dict:
    """Make API request to backend"""
    try:
        url = f"{BACKEND_URL}{endpoint}"
        
        if method == "GET":
            response = requests.get(url, timeout=API_TIMEOUT)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=API_TIMEOUT)
        else:
            raise ValueError(f"Unsupported method: {method}")
        
        response.raise_for_status()
        return response.json()
    
    except requests.exceptions.RequestException as e:
        if DEBUG_MODE:
            st.error(f"API request failed: {str(e)}")
        return {"error": str(e)}
    except Exception as e:
        if DEBUG_MODE:
            st.error(f"Unexpected error: {str(e)}")
        return {"error": str(e)}

@st.cache_data(ttl=TRANSLATION_CACHE_TTL)
def translate_text(text: str, target_language: str, source_language: str = "en") -> str:
    """Translate text using backend API with caching"""
    if not text or source_language == target_language or not TRANSLATION_ENABLED:
        return text
    
    try:
        data = {
            "text": text[:TRANSLATION_MAX_LENGTH],
            "source_language": source_language,
            "target_language": target_language
        }
        
        result = make_api_request("/api/translate", "POST", data)
        
        if "error" not in result:
            return result.get("translated_text", text)
        else:
            return text
    
    except Exception:
        return text

@st.cache_data(ttl=SIMPLIFICATION_CACHE_TTL)
def simplify_text(text: str, level: str = None) -> str:
    """Simplify text using backend API with caching"""
    if not text or not SIMPLIFICATION_ENABLED:
        return text
    
    if level is None:
        level = SIMPLIFICATION_DEFAULT_LEVEL
    
    try:
        data = {
            "text": text,
            "target_level": level
        }
        
        result = make_api_request("/api/simplify", "POST", data)
        
        if "error" not in result:
            return result.get("simplified_text", text)
        else:
            return text
    
    except Exception:
        return text

def get_text(key: str, language: str = None) -> str:
    """Get translated text for the current language"""
    if language is None:
        language = st.session_state.current_language
    
    # Map language codes to translation keys
    lang_map = {
        "en": "English",
        "hi": "Hindi", 
        "ta": "Tamil",
        "te": "Telugu"
    }
    
    lang_key = lang_map.get(language, "English")
    
    if lang_key in TRANSLATIONS and key in TRANSLATIONS[lang_key]:
        return TRANSLATIONS[lang_key][key]
    else:
        # Fallback to English
        return TRANSLATIONS["English"].get(key, key)

def display_text_with_translation(text: str, key: str = None):
    """Display text with optional translation and simplification"""
    if not text:
        return
    
    # Apply translation if enabled
    if st.session_state.translation_enabled and st.session_state.current_language != "en":
        translated_text = translate_text(text, st.session_state.current_language, "en")
    else:
        translated_text = text
    
    # Apply simplification if enabled
    if st.session_state.simplification_enabled:
        simplified_text = simplify_text(translated_text)
    else:
        simplified_text = translated_text
    
    # Display the text
    st.markdown(simplified_text)

# ========================================
# UI COMPONENTS
# ========================================

def render_header():
    """Render main header with branding"""
    st.markdown(f"""
    <div class="main-header">
        <h1>ЁЯПа {get_text('welcome_banner_text')}</h1>
        <p>{get_text('welcome_banner_tagline')}</p>
    </div>
    """, unsafe_allow_html=True)

def render_language_controls():
    """Render language and simplification controls"""
    if not (TRANSLATION_ENABLED or SIMPLIFICATION_ENABLED):
        return
    
    st.markdown("""
    <div class="translation-bar">
        <h4>ЁЯМН Language & Accessibility Settings</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if TRANSLATION_ENABLED:
            # Language selector
            language_options = [
                f"{lang_info['flag']} {lang_info['native']}" 
                for lang_code, lang_info in SUPPORTED_LANGUAGES.items()
            ]
            
            selected_lang_display = st.selectbox(
                "Select Language",
                language_options,
                index=list(SUPPORTED_LANGUAGES.keys()).index(st.session_state.current_language),
                key="language_selector"
            )
            
            # Extract language code from selection
            for lang_code, lang_info in SUPPORTED_LANGUAGES.items():
                if f"{lang_info['flag']} {lang_info['native']}" == selected_lang_display:
                    if st.session_state.current_language != lang_code:
                        st.session_state.current_language = lang_code
                        st.rerun()
                    break
    
    with col2:
        if TRANSLATION_ENABLED:
            # Translation toggle
            translation_enabled = st.checkbox(
                "ЁЯФД Enable Translation",
                value=st.session_state.translation_enabled,
                help="Translate content to your selected language"
            )
            
            if translation_enabled != st.session_state.translation_enabled:
                st.session_state.translation_enabled = translation_enabled
                st.rerun()
    
    with col3:
        if SIMPLIFICATION_ENABLED:
            # Simplification toggle
            simplification_enabled = st.checkbox(
                "ЁЯТб Simplify Complex Terms",
                value=st.session_state.simplification_enabled,
                help="Make complex financial and technical terms easier to understand"
            )
            
            if simplification_enabled != st.session_state.simplification_enabled:
                st.session_state.simplification_enabled = simplification_enabled
                st.rerun()
    
    # Show current settings
    active_features = []
    if st.session_state.translation_enabled and TRANSLATION_ENABLED:
        lang_name = SUPPORTED_LANGUAGES[st.session_state.current_language]['native']
        active_features.append(f"Translating to {lang_name}")
    if st.session_state.simplification_enabled and SIMPLIFICATION_ENABLED:
        active_features.append("Simplifying complex terms")
    
    if active_features:
        st.info(f"Active: {' | '.join(active_features)}")

@st.cache_data(ttl=60)
def test_backend_connection():
    """Test backend connection and return status"""
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            return {"status": "connected", "data": response.json()}
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

def render_navigation():
    """Render main navigation sidebar"""
    with st.sidebar:
        st.markdown("## ЁЯзн Navigation")
        
        # Configuration validation
        config_valid = validate_configuration()
        
        if not config_valid:
            st.error("тЪая╕П Configuration incomplete")
        
        # Backend connection status
        connection_status = test_backend_connection()
        if connection_status["status"] == "connected":
            st.success("тЬЕ Backend Connected")
            
            # Show feature status
            if "data" in connection_status:
                features = connection_status["data"].get("features", {})
                if features.get("translation"):
                    st.success("тЬЕ Translation Available")
                if features.get("simplification"):
                    st.success("тЬЕ Simplification Available")
        else:
            st.error(f"тЭМ Backend: {connection_status['message']}")
        
        # Main pages
        page = st.radio(
            "Choose a page:",
            [
                f"ЁЯПа {get_text('home')}",
                f"ЁЯФН {get_text('explore')} Campaigns", 
                "ЁЯЪА Create Campaign",
                f"ЁЯСд {get_text('profile')}",
                "ЁЯФР Authentication",
                "ЁЯМН Translation Hub" if TRANSLATION_ENABLED else None,
                "ЁЯТб Simplification Center" if SIMPLIFICATION_ENABLED else None,
                "ЁЯУК Analytics" if ANALYTICS_ENABLED else None
            ]
        )
        
        st.markdown("---")
        
        # Quick actions
        st.markdown("## тЪб Quick Actions")
        
        if TRANSLATION_ENABLED and st.button("ЁЯФД Toggle Translation"):
            st.session_state.translation_enabled = not st.session_state.translation_enabled
            st.rerun()
        
        if SIMPLIFICATION_ENABLED and st.button("ЁЯТб Toggle Simplification"):
            st.session_state.simplification_enabled = not st.session_state.simplification_enabled
            st.rerun()
        
        # Configuration display
        show_configuration()
    
    return page

# ========================================
# PAGE FUNCTIONS
# ========================================

def render_home_page():
    """Render the home page"""
    st.markdown(f"# ЁЯПа {get_text('welcome_banner_text')}")
    
    display_text_with_translation(f"Welcome to {get_text('welcome_banner_text')} - {get_text('subtitle')}")
    display_text_with_translation(get_text('welcome_banner_tagline'))
    
    # Feature cards
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <h3>ЁЯМН Multilingual Support</h3>
            <p>Access the platform in English, Hindi, Tamil, and Telugu</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <h3>ЁЯТб Smart Simplification</h3>
            <p>Complex terms explained in simple language</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <h3>ЁЯФТ Secure Platform</h3>
            <p>Safe and transparent crowdfunding</p>
        </div>
        """, unsafe_allow_html=True)

def render_explore_page():
    """Render the explore campaigns page"""
    st.markdown(f"# ЁЯФН {get_text('explore')} Campaigns")
    
    display_text_with_translation("Discover amazing campaigns from creators around the world.")
    
    # Categories
    st.markdown(f"## {get_text('categories')}")
    
    categories = [
        ("ЁЯФм", get_text('technology')),
        ("ЁЯПе", get_text('health')),
        ("ЁЯУЪ", get_text('education')),
        ("ЁЯМ▒", get_text('environment')),
        ("ЁЯОи", get_text('arts')),
        ("ЁЯдЭ", get_text('community'))
    ]
    
    cols = st.columns(3)
    for i, (icon, category) in enumerate(categories):
        with cols[i % 3]:
            if st.button(f"{icon} {category}", key=f"cat_{i}"):
                st.info(f"Showing {category} campaigns...")

def render_authentication_page():
    """Render the authentication page"""
    st.markdown("# ЁЯФР Authentication")
    
    if OAUTH_ENABLED and GOOGLE_CLIENT_ID and FACEBOOK_APP_ID:
        st.markdown("### OAuth Login")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button(f"ЁЯФ┤ {get_text('sign_in_google')}", key="google_oauth"):
                google_auth_url = f"{BACKEND_URL}/auth/google"
                st.markdown(f"[Click here to sign in with Google]({google_auth_url})")
        
        with col2:
            if st.button(f"ЁЯФ╡ {get_text('sign_in_facebook')}", key="facebook_oauth"):
                facebook_auth_url = f"{BACKEND_URL}/auth/facebook"
                st.markdown(f"[Click here to sign in with Facebook]({facebook_auth_url})")
    else:
        st.warning("OAuth not configured. Please set up OAuth credentials in environment variables.")
    
    st.markdown("---")
    
    # Manual login form
    st.markdown(f"### {get_text('login')}")
    
    with st.form("login_form"):
        email = st.text_input(get_text('email'))
        password = st.text_input(get_text('password'), type="password")
        
        if st.form_submit_button(get_text('login')):
            if email and password:
                st.success(f"Login attempted for {email}")
            else:
                st.error("Please fill in all fields")

def render_translation_hub():
    """Render the translation hub page"""
    if not TRANSLATION_ENABLED:
        st.error("Translation feature is not enabled")
        return
    
    st.markdown("# ЁЯМН Translation Hub")
    
    st.markdown("### Translate Text")
    
    # Source text input
    source_text = st.text_area("Enter text to translate:", height=100)
    
    # Language selection
    col1, col2 = st.columns(2)
    
    with col1:
        source_lang = st.selectbox(
            "From Language:",
            options=list(SUPPORTED_LANGUAGES.keys()),
            format_func=lambda x: f"{SUPPORTED_LANGUAGES[x]['flag']} {SUPPORTED_LANGUAGES[x]['native']}"
        )
    
    with col2:
        target_lang = st.selectbox(
            "To Language:",
            options=list(SUPPORTED_LANGUAGES.keys()),
            format_func=lambda x: f"{SUPPORTED_LANGUAGES[x]['flag']} {SUPPORTED_LANGUAGES[x]['native']}"
        )
    
    if st.button("ЁЯФД Translate") and source_text:
        if source_lang != target_lang:
            with st.spinner("Translating..."):
                translated = translate_text(source_text, target_lang, source_lang)
                st.success("Translation completed!")
                st.markdown("### Result:")
                st.write(translated)
        else:
            st.warning("Please select different source and target languages")

def render_simplification_center():
    """Render the simplification center page"""
    if not SIMPLIFICATION_ENABLED:
        st.error("Simplification feature is not enabled")
        return
    
    st.markdown("# ЁЯТб Simplification Center")
    
    st.markdown("### Simplify Complex Text")
    
    # Text input
    complex_text = st.text_area("Enter complex text to simplify:", height=100)
    
    # Simplification level
    level = st.selectbox(
        "Simplification Level:",
        options=["very_simple", "simple", "moderate"],
        index=1
    )
    
    if st.button("ЁЯТб Simplify") and complex_text:
        with st.spinner("Simplifying..."):
            simplified = simplify_text(complex_text, level)
            st.success("Simplification completed!")
            st.markdown("### Result:")
            st.write(simplified)

# ========================================
# MAIN APPLICATION
# ========================================

def main():
    """Main application function"""
    # Validate configuration first
    if not validate_configuration():
        st.stop()
    
    # Render header
    render_header()
    
    # Render language controls
    render_language_controls()
    
    # Render navigation and get selected page
    selected_page = render_navigation()
    
    # Route to appropriate page
    if selected_page.startswith("ЁЯПа"):
        render_home_page()
    elif selected_page.startswith("ЁЯФН"):
        render_explore_page()
    elif selected_page.startswith("ЁЯЪА"):
        st.markdown("# ЁЯЪА Create Campaign")
        st.info("Campaign creation feature coming soon!")
    elif selected_page.startswith("ЁЯСд"):
        st.markdown(f"# ЁЯСд {get_text('profile')}")
        st.info("Profile management feature coming soon!")
    elif selected_page.startswith("ЁЯФР"):
        render_authentication_page()
    elif selected_page.startswith("ЁЯМН"):
        render_translation_hub()
    elif selected_page.startswith("ЁЯТб"):
        render_simplification_center()
    elif selected_page.startswith("ЁЯУК"):
        st.markdown("# ЁЯУК Analytics")
        st.info("Analytics dashboard coming soon!")
    
    # Footer
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>ЁЯПа {get_text('welcome_banner_text')} {get_text('subtitle')} | Environment: {ENVIRONMENT}</p>
        <p>ЁЯМН Supporting {len(SUPPORTED_LANGUAGES)} languages | ЁЯТб AI-powered simplification | ЁЯЫбя╕П Secure & transparent</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

# Export configuration for other modules
__all__ = [
    'BACKEND_URL', 'TRANSLATION_ENABLED', 'SIMPLIFICATION_ENABLED', 
    'OAUTH_ENABLED', 'make_api_request', 'translate_text', 'simplify_text'
]

