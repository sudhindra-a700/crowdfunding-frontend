# -*- coding: utf-8 -*-
"""HAVEN Crowdfunding Streamlit App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19q5nIlffbHFlcTNPvzWTB3jxvsFDineb
"""

import streamlit as st
import requests
import base64
from datetime import datetime
import json
import os
from urllib.parse import urlencode
import time
import re

# --- Page configuration ---
st.set_page_config(
    page_title="HAVEN - Crowdfunding Platform",
    page_icon="ЁЯПа",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- Environment variables for OAuth and Backend URL ---
# These variables are loaded from the environment, matching the keys in your crowdfunding (3).env file.
BACKEND_URL = os.getenv("BACKEND_URL", "https://haven-fastapi-backend.onrender.com")
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID", "your-google-client-id")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI", f"{BACKEND_URL}/auth/google/callback")
FACEBOOK_CLIENT_ID = os.getenv("FACEBOOK_CLIENT_ID", "your-facebook-app-id")
FACEBOOK_REDIRECT_URI = os.getenv("FACEBOOK_REDIRECT_URI", f"{BACKEND_URL}/auth/facebook/callback")
FRONTEND_BASE_URI = os.getenv("FRONTEND_BASE_URI", "https://haven-streamlit-frontend.onrender.com")


# --- Translation Dictionary and Term Simplification Logic ---
# Placeholder dictionary for translations
# In a real-world scenario, this would be populated by a translation service like IndicTrans2.
TRANSLATIONS = {
    'en': {
        'page_title': "HAVEN - Crowdfunding Platform",
        'tagline': "Help not just some people, but Help Humanity.",
        'trending_title': "Trending Campaigns",
        'search_title': "Search Campaigns",
        'explore_title': "Explore Categories",
        'profile_title': "User Profile",
        'login_title': "Login",
        'register_title': "Register",
        'login_prompt': "Enter Your Email",
        'password_prompt': "Enter Your Password",
        'not_registered': "Not registered?",
        'create_account': "Create an account",
        'or_signin_with': "or you can sign in with",
        'trending_nav': "Trending",
        'search_nav': "Search",
        'explore_nav': "Explore",
        'profile_nav': "Profile",
        'language': "Language",
        'term_simplification': "Term Simplification",
        'simplify_term': "Enter a term to simplify",
        'simplify_button': "Simplify Term",
        'ask_ai': "Ask AI",
        'select_language': "Select Language",
        'search_placeholder': "Search by keyword, category...",
        'logout': "Logout",
        'placeholder_simplify_result': "Simplified term will appear here.",
        'simplify_page_title': "Term Simplification",
        'simplify_intro': "Enter a complex term or concept, and our AI will provide a simple, easy-to-understand explanation.",
        'please_enter_term': "Please enter a term to simplify."
    },
    'hi': {
        'page_title': "рд╣реЗрд╡рди - рдХреНрд░рд╛рдЙрдбрдлрдВрдбрд┐рдВрдЧ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо",
        'tagline': "рдХреЗрд╡рд▓ рдХреБрдЫ рд▓реЛрдЧреЛрдВ рдХреА рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ рдорд╛рдирд╡рддрд╛ рдХреА рдорджрдж рдХрд░реЗрдВред",
        'trending_title': "рдЯреНрд░реЗрдВрдбрд┐рдВрдЧ рдЕрднрд┐рдпрд╛рди",
        'search_title': "рдЕрднрд┐рдпрд╛рди рдЦреЛрдЬреЗрдВ",
        'explore_title': "рд╢реНрд░реЗрдгрд┐рдпрд╛рдБ рдЦреЛрдЬреЗрдВ",
        'profile_title': "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
        'login_title': "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ",
        'register_title': "рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ",
        'login_prompt': "рдЕрдкрдирд╛ рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ",
        'password_prompt': "рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ",
        'not_registered': "рдкрдВрдЬреАрдХреГрдд рдирд╣реАрдВ рд╣реИрдВ?",
        'create_account': "рдПрдХ рдЦрд╛рддрд╛ рдмрдирд╛рдПрдБ",
        'or_signin_with': "рдпрд╛ рдЖрдк рдЗрд╕рдХреЗ рд╕рд╛рде рд╕рд╛рдЗрди рдЗрди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ",
        'trending_nav': "рдЯреНрд░реЗрдВрдбрд┐рдВрдЧ",
        'search_nav': "рдЦреЛрдЬ",
        'explore_nav': "рдЦреЛрдЬ",
        'profile_nav': "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
        'language': "рднрд╛рд╖рд╛",
        'term_simplification': "рд╢рдмреНрдж рд╕рд░рд▓реАрдХрд░рдг",
        'simplify_term': "рд╕рд░рд▓ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╢рдмреНрдж рджрд░реНрдЬ рдХрд░реЗрдВ",
        'simplify_button': "рд╢рдмреНрдж рд╕рд░рд▓ рдХрд░реЗрдВ",
        'ask_ai': "рдПрдЖрдИ рд╕реЗ рдкреВрдЫреЗрдВ",
        'select_language': "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        'search_placeholder': "рдХреАрд╡рд░реНрдб, рд╢реНрд░реЗрдгреА рджреНрд╡рд╛рд░рд╛ рдЦреЛрдЬреЗрдВ...",
        'logout': "рд▓реЙрдЧ рдЖрдЙрдЯ",
        'placeholder_simplify_result': "рд╕рд░рд▓реАрдХреГрдд рд╢рдмреНрдж рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛ред",
        'simplify_page_title': "рд╢рдмреНрдж рд╕рд░рд▓реАрдХрд░рдг",
        'simplify_intro': "рдПрдХ рдЬрдЯрд┐рд▓ рд╢рдмреНрдж рдпрд╛ рдЕрд╡рдзрд╛рд░рдгрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ, рдФрд░ рд╣рдорд╛рд░рд╛ рдПрдЖрдИ рдПрдХ рд╕рд░рд▓, рд╕рдордЭрдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рд╕реНрдкрд╖реНрдЯреАрдХрд░рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдЧрд╛ред",
        'please_enter_term': "рдХреГрдкрд╛ рдХрд░рдХреЗ рд╕рд░рд▓реАрдХрд░рдг рдХреЗ рд▓рд┐рдП рдПрдХ рд╢рдмреНрдж рджрд░реНрдЬ рдХрд░реЗрдВред"
    },
    'ta': {
        'page_title': "ро╣рпЖро╡ройрпН - роХро┐ро░ро╡рпБроЯрпНроГрокрогрпНроЯро┐роЩрпН рокро┐ро│ро╛роЯрпНроГрокро╛ро░рпНроорпН",
        'tagline': "роЪро┐ро▓ро░рпБроХрпНроХрпБ роороЯрпНроЯрпБрооро▓рпНро▓, рооройро┐родроХрпБро▓родрпНродро┐ро▒рпНроХрпЗ роЙродро╡рпБроЩрпНроХро│рпН.",
        'trending_title': "рокро┐ро░рокро▓рооро╛рой рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпН",
        'search_title': "рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпИродрпН родрпЗроЯрпБ",
        'explore_title': "рокро┐ро░ро┐ро╡рпБроХро│рпИ роЖро░ро╛ропрпБроЩрпНроХро│рпН",
        'profile_title': "рокропройро░рпН роЪрпБропро╡ро┐ро╡ро░роорпН",
        'login_title': "роЙро│рпНроирпБро┤рпИ",
        'register_title': "рокродро┐ро╡рпБроЪрпЖропрпН",
        'login_prompt': "роЙроЩрпНроХро│рпН рооро┐ройрпНройроЮрпНроЪро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        'password_prompt': "роЙроЩрпНроХро│рпН роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        'not_registered': "рокродро┐ро╡рпБ роЪрпЖропрпНропро╡ро┐ро▓рпНро▓рпИропро╛?",
        'create_account': "роТро░рпБ роХрогроХрпНроХрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        'or_signin_with': "роЕро▓рпНро▓родрпБ роирпАроЩрпНроХро│рпН роЗро╡ро▒рпНро▒рпБроЯройрпН роЙро│рпНроирпБро┤рпИропро▓ро╛роорпН",
        'trending_nav': "рокро┐ро░рокро▓роорпН",
        'search_nav': "родрпЗроЯро▓рпН",
        'explore_nav': "роЖро░ро╛ропрпН",
        'profile_nav': "роЪрпБропро╡ро┐ро╡ро░роорпН",
        'language': "роорпКро┤ро┐",
        'term_simplification': "роЪрпКро▓рпН роОро│ро┐родро╛роХрпНроХро▓рпН",
        'simplify_term': "роОро│ро┐родро╛роХрпНроХ роТро░рпБ роЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        'simplify_button': "роЪрпКро▓рпНро▓рпИ роОро│ро┐родро╛роХрпНроХрпБ",
        'ask_ai': "AI-ропро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН",
        'select_language': "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        'search_placeholder': "роорпБроХрпНроХро┐роп ро╡ро╛ро░рпНродрпНродрпИ, ро╡роХрпИрокрпНрокроЯро┐ родрпЗроЯрпБ...",
        'logout': "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
        'placeholder_simplify_result': "роОро│ро┐родро╛роХрпНроХрокрпНрокроЯрпНроЯ роЪрпКро▓рпН роЗроЩрпНроХрпЗ родрпЛройрпНро▒рпБроорпН.",
        'simplify_page_title': "роЪрпКро▓рпН роОро│ро┐родро╛роХрпНроХро▓рпН",
        'simplify_intro': "роТро░рпБ роЪро┐роХрпНроХро▓ро╛рой роЪрпКро▓рпНро▓рпИ роЕро▓рпНро▓родрпБ роХро░рпБродрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН, роОроЩрпНроХро│рпН AI роТро░рпБ роОро│ро┐роп, рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роОро│ро┐родро╛рой ро╡ро┐ро│роХрпНроХродрпНродрпИ ро╡ро┤роЩрпНроХрпБроорпН.",
        'please_enter_term': "родропро╡рпБроЪрпЖропрпНродрпБ роОро│ро┐родро╛роХрпНроХ роТро░рпБ роЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН."
    },
    'te': {
        'page_title': "р░╣р▒Зр░╡р▒Жр░ир▒Н - р░Хр▒Нр░░р▒Мр░бр▒НтАМр░лр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░▓р░╛р░Яр▒НтАМр░лр░╛р░░р░ор▒Н",
        'tagline': "р░Хр▒Кр░Вр░др░ор░Вр░жр░┐р░Хр░┐ р░ор░╛р░др▒Нр░░р░ор▒З р░Хр░╛р░Хр▒Бр░Вр░бр░╛, р░ор░╛р░ир░╡р░др▒Нр░╡р░╛р░ир░┐р░Хр░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Вр░бр░┐.",
        'trending_title': "р░Яр▒Нр░░р▒Жр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р▒Б",
        'search_title': "р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р░ир▒Б р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐",
        'explore_title': "р░╡р░░р▒Нр░Чр░╛р░▓р░ир▒Б р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐",
        'profile_title': "р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
        'login_title': "р░▓р░╛р░Чр░┐р░ир▒Н",
        'register_title': "р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'login_prompt': "р░ор▒А р░Зр░ор▒Жр░пр░┐р░▓р▒Н р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'password_prompt': "р░ор▒А р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒НтАМр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'not_registered': "р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Лр░▓р▒Зр░жр░╛?",
        'create_account': "р░Тр░Х р░Цр░╛р░др░╛р░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐",
        'or_signin_with': "р░▓р▒Зр░жр░╛ р░ор▒Ар░░р▒Б р░жр▒Ар░ир░┐р░др▒Л р░╕р▒Ир░ир▒Н р░Зр░ир▒Н р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б",
        'trending_nav': "р░Яр▒Нр░░р▒Жр░Вр░бр░┐р░Вр░Чр▒Н",
        'search_nav': "р░╢р▒Лр░зр░и",
        'explore_nav': "р░Ер░ир▒Нр░╡р▒Зр░╖р░г",
        'profile_nav': "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
        'language': "р░нр░╛р░╖",
        'term_simplification': "р░кр░жр░В р░╕р░░р░│р▒Ар░Хр░░р░г",
        'simplify_term': "р░╕р░░р░│р▒Ар░Хр░░р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Тр░Х р░кр░жр░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'simplify_button': "р░кр░жр░В р░╕р░░р░│р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
        'ask_ai': "AIр░ир░┐ р░Ер░бр░Чр░Вр░бр░┐",
        'select_language': "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        'search_placeholder': "р░Хр▒Ар░▓р░Хр░кр░жр░В, р░╡р░░р▒Нр░Чр░В р░жр▒Нр░╡р░╛р░░р░╛ р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐...",
        'logout': "р░▓р░╛р░Чр▒Н р░Ер░╡р▒Бр░Яр▒Н",
        'placeholder_simplify_result': "р░╕р░░р░│р▒Ар░Хр░░р░┐р░Вр░Ър░┐р░и р░кр░жр░В р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
        'simplify_page_title': "р░кр░жр░В р░╕р░░р░│р▒Ар░Хр░░р░г",
        'simplify_intro': "р░Тр░Х р░Хр▒Нр░▓р░┐р░╖р▒Нр░Яр░ор▒Ир░и р░кр░жр░В р░▓р▒Зр░жр░╛ р░нр░╛р░╡р░ир░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐, р░ор░╛ AI р░Тр░Х р░╕р▒Бр░▓р░нр░ор▒Ир░и, р░Ер░░р▒Нр░ер░В р░Ър▒Зр░╕р▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░╕р▒Бр░▓р░нр░ор▒Ир░и р░╡р░┐р░╡р░░р░гр░ир▒Б р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
        'please_enter_term': "р░жр░пр░Ър▒Зр░╕р░┐ р░╕р░░р░│р▒Ар░Хр░░р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Тр░Х р░кр░жр░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐ред"
    }
}

# This dictionary simulates a backend service for term simplification.
# In a real app, this would be an API call.
SIMPLIFIED_TERMS = {
    'Crowdfunding': 'A way of raising money from a large number of people, typically via the internet.',
    'Social impact': 'The positive or negative effect of an organization, program, or policy on people and communities.',
    'Sustainability': 'The ability to exist constantly. In business, it means a companyтАЩs ability to operate without negatively impacting the environment.',
    'Philanthropy': 'The desire to promote the welfare of others, typically expressed by the generous donation of money to good causes.',
}

def get_translated_text(key, lang):
    """Retrieves translated text from the dictionary."""
    return TRANSLATIONS.get(lang, TRANSLATIONS['en']).get(key, f"Translation missing for '{key}'")


def process_content_for_simplification(text):
    """
    Scans a text for predefined complex terms and wraps them in an HTML structure
    that creates a tooltip on hover.
    """
    for term, definition in SIMPLIFIED_TERMS.items():
        # Use regex to find and replace the whole word, case-insensitive
        text = re.sub(
            r'\b' + re.escape(term) + r'\b',
            f'<span class="tooltip">{term} <span class="info-icon">i</span><span class="tooltiptext">{definition}</span></span>',
            text,
            flags=re.IGNORECASE
        )
    return text

# --- Utility functions ---
def load_logo():
    """
    Loads the HAVEN logo from the local file system and encodes it as base64.
    A fallback is provided if the file is not found in the specified path.
    """
    try:
        # Assuming the logo is available in the deployment environment
        # Note: The path might need to be adjusted based on your deployment setup.
        with open("haven_logo.png", "rb") as f:
            logo_data = f.read()
        return base64.b64encode(logo_data).decode()
    except FileNotFoundError:
        # Fallback if logo file is not found
        return None

def load_custom_css(page):
    """
    Loads custom CSS and a JavaScript snippet to apply the correct background
    color to the page body based on the current page. The styles are
    designed to match the provided image mockups.
    """
    st.markdown(f"""
    <style>
    /* Hide Streamlit default elements */
    #MainMenu {{visibility: hidden;}}
    footer {{visibility: hidden;}}
    header {{visibility: hidden;}}
    .stDeployButton {{display: none;}}

    /* Global styling for main container */
    .main .block-container {{
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 100%;
        min-height: 100vh;
    }}

    /* Page-specific body background styles */
    .login-page-bg {{
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        color: #1a237e;
    }}
    .register-page-bg {{
        background: linear-gradient(135deg, #ffcdd2 0%, #f8bbd9 100%);
        color: #263238;
    }}
    .trending-page-bg {{
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        color: #1a237e;
    }}
    .search-page-bg {{
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        color: #212121;
    }}
    .explore-page-bg {{
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        color: #212121;
    }}
    .profile-page-bg {{
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        color: #212121;
    }}
    .campaign-page-bg {{
        background: linear-gradient(135deg, #f1f8e9 0%, #dcedc8 100%);
        color: #263238;
    }}
    .simplify-page-bg {{
        background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
        color: #004d40;
    }}

    /* Top navigation bar styling */
    .top-nav {{
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background: white;
        border-bottom: 1px solid #e0e0e0;
        margin-bottom: 2rem;
    }}
    .top-nav .stSelectbox {{
        width: 150px;
    }}

    /* Login card styling */
    .login-card {{
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        max-width: 400px;
        margin: 0 auto;
    }}

    /* Registration card styling */
    .register-card {{
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        max-width: 800px;
        margin: 0 auto;
    }}

    /* OAuth buttons styling - matching first image */
    .oauth-button {{
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        margin: 8px 0;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        transition: all 0.3s ease;
    }}

    .google-btn {{
        background: #4285f4;
        color: white;
    }}

    .google-btn:hover {{
        background: #357ae8;
        transform: translateY(-2px);
    }}

    .facebook-btn {{
        background: #1877f2;
        color: white;
    }}

    .facebook-btn:hover {{
        background: #166fe5;
        transform: translateY(-2px);
    }}

    /* Campaign card styling */
    .campaign-card {{
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }}

    .campaign-card:hover {{
        transform: translateY(-5px);
    }}

    /* Category card styling */
    .category-card {{
        background: white;
        border-radius: 15px;
        padding: 2rem;
        text-align: center;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
        cursor: pointer;
    }}

    .category-card:hover {{
        transform: translateY(-5px);
    }}

    .category-icon {{
        font-size: 3rem;
        margin-bottom: 1rem;
    }}

    /* Progress bar styling */
    .progress-container {{
        background: #f0f0f0;
        border-radius: 10px;
        height: 8px;
        margin: 10px 0;
    }}

    .progress-bar {{
        background: linear-gradient(90deg, #4caf50, #8bc34a);
        height: 100%;
        border-radius: 10px;
        transition: width 0.3s ease;
    }}

    /* Tooltip styles for simplification */
    .tooltip {{
        position: relative;
        display: inline-block;
    }}

    .info-icon {{
        background-color: #4CAF50;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        font-size: 12px;
        text-align: center;
        line-height: 18px;
        font-style: normal;
        margin-left: 5px;
        cursor: pointer;
    }}

    .tooltip .tooltiptext {{
        visibility: hidden;
        width: 250px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%; /* Position the tooltip above the text */
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
    }}

    /* Show the tooltip when hovering over the parent span */
    .tooltip:hover .tooltiptext {{
        visibility: visible;
        opacity: 1;
    }}

    /* Bottom navigation styling */
    .bottom-nav {{
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        border-top: 1px solid #e0e0e0;
        padding: 10px 0;
        display: flex;
        justify-content: space-around;
        z-index: 1000;
    }}

    .nav-item {{
        text-align: center;
        cursor: pointer;
        padding: 5px;
        transition: color 0.3s ease;
    }}

    .nav-item:hover {{
        color: #4caf50;
    }}

    /* Typography */
    h1 {{
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }}

    h2 {{
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }}

    h3 {{
        font-size: 1.5rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }}

    p {{
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 1rem;
    }}

    /* Form styling */
    .stTextInput > div > div > input {{
        border-radius: 8px;
        border: 2px solid #e0e0e0;
        padding: 12px;
        font-size: 16px;
    }}

    .stSelectbox > div > div > select {{
        border-radius: 8px;
        border: 2px solid #e0e0e0;
        padding: 12px;
        font-size: 16px;
    }}

    .stTextArea > div > div > textarea {{
        border-radius: 8px;
        border: 2px solid #e0e0e0;
        padding: 12px;
        font-size: 16px;
    }}

    /* Button styling */
    .stButton > button {{
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 500;
        border: none;
        transition: all 0.3s ease;
    }}

    .stButton > button:hover {{
        transform: translateY(-2px);
    }}

    /* Search box styling */
    .search-box {{
        background: white;
        border-radius: 25px;
        padding: 15px 20px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }}

    /* Responsive design */
    @media (max-width: 768px) {{
        .login-card, .register-card {{
            margin: 1rem;
            padding: 1.5rem;
        }}
        h1 {{
            font-size: 2rem;
        }}
        h2 {{
            font-size: 1.5rem;
        }}
        .haven-logo img {{
            max-width: 150px;
        }}
    }}
    </style>
    <script>
    // Get the page from the URL and apply a class to the body
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page');
    const body = document.querySelector('body');
    if (body) {{
        if (page) {{
            body.classList.add(page + '-page-bg');
        }} else {{
            // Default to login page background
            body.classList.add('login-page-bg');
        }}
    }}
    </script>
    """, unsafe_allow_html=True)

def get_oauth_url(provider):
    """Generate OAuth URL for Google or Facebook"""
    if provider == "google":
        params = {
            "client_id": GOOGLE_CLIENT_ID,
            "redirect_uri": GOOGLE_REDIRECT_URI,
            "scope": "openid email profile",
            "response_type": "code",
            "state": "google"
        }
        return f"https://accounts.google.com/o/oauth2/auth?{urlencode(params)}"
    elif provider == "facebook":
        params = {
            "client_id": FACEBOOK_CLIENT_ID,
            "redirect_uri": FACEBOOK_REDIRECT_URI,
            "scope": "email,public_profile",
            "response_type": "code",
            "state": "facebook"
        }
        return f"https://www.facebook.com/v18.0/dialog/oauth?{urlencode(params)}"

def oauth_login_button(provider, text, icon):
    """Create OAuth login button with popup functionality"""
    button_class = f"{provider}-btn oauth-button"
    oauth_url = get_oauth_url(provider)
    button_html = f"""
    <button class="{button_class}" onclick="openOAuthPopup('{oauth_url}', '{provider}')">
        {icon} {text}
    </button>
    """
    st.markdown(button_html, unsafe_allow_html=True)
    
    # Placeholder for the popup window script
    st.markdown("""
    <script>
        function openOAuthPopup(url, provider) {
            const width = 600;
            const height = 600;
            const left = (window.innerWidth / 2) - (width / 2);
            const top = (window.innerHeight / 2) - (height / 2);
            window.open(url, provider, `width=${width},height=${height},left=${left},top=${top}`);
        }
    </script>
    """, unsafe_allow_html=True)


# --- Page content functions ---

def login_page():
    """Renders the login page."""
    load_custom_css('login')
    st.markdown(
        f"<h1 style='text-align: center; color: #1a237e;'>{get_translated_text('page_title', st.session_state.language)}</h1>",
        unsafe_allow_html=True
    )
    st.markdown(
        f"<h2 style='text-align: center; color: #1a237e; font-style: italic;'>{get_translated_text('tagline', st.session_state.language)}</h2>",
        unsafe_allow_html=True
    )
    
    with st.container():
        st.markdown("<div class='login-card'>", unsafe_allow_html=True)
        st.subheader(get_translated_text('login_title', st.session_state.language))
        email = st.text_input(get_translated_text('login_prompt', st.session_state.language))
        password = st.text_input(get_translated_text('password_prompt', st.session_state.language), type="password")
        
        if st.button(get_translated_text('login_title', st.session_state.language)):
            # This is a placeholder for the actual login logic
            try:
                response = requests.post(
                    f"{BACKEND_URL}/api/auth/login",
                    json={"email": email, "password": password}
                )
                if response.status_code == 200:
                    st.success("Login successful!")
                    st.session_state.authenticated = True
                    st.session_state.token = response.json().get("token")
                    st.experimental_set_query_params(page='trending')
                    st.rerun()
                else:
                    st.error(f"Login failed: {response.json().get('detail', 'Invalid credentials')}")
            except requests.exceptions.RequestException as e:
                st.error(f"An error occurred: {e}")

        st.markdown(f"---")
        st.markdown(f"<p style='text-align: center;'>{get_translated_text('not_registered', st.session_state.language)} <a href='?page=register' style='color: #42a5f5;'>{get_translated_text('create_account', st.session_state.language)}</a></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='text-align: center;'>{get_translated_text('or_signin_with', st.session_state.language)}</p>", unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        with col1:
            oauth_login_button("google", "Google", "<i class='fa-brands fa-google'></i>")
        with col2:
            oauth_login_button("facebook", "Facebook", "<i class='fa-brands fa-facebook'></i>")
        
        st.markdown("</div>", unsafe_allow_html=True)


def register_page():
    """Renders the registration page."""
    load_custom_css('register')
    st.title(get_translated_text('register_title', st.session_state.language))
    st.write("This page allows users to create a new account.")
    if st.button("Go to Login"):
        st.experimental_set_query_params(page='login')


def trending_page():
    """Renders the trending campaigns page with term simplification."""
    load_custom_css('trending')
    st.title(get_translated_text('trending_title', st.session_state.language))

    # Sample content to demonstrate the simplification feature
    sample_text = """
    We are launching a new initiative to promote Sustainability and a positive Social impact in local communities. 
    Our mission is to use Crowdfunding to support various Philanthropy projects.
    """
    
    processed_text = process_content_for_simplification(sample_text)
    
    st.markdown(f"<h3>About this Initiative</h3>", unsafe_allow_html=True)
    st.markdown(f"<p>{processed_text}</p>", unsafe_allow_html=True)

    st.write("Displaying the top trending campaigns.")


def search_page():
    """Renders the search campaigns page."""
    load_custom_css('search')
    st.title(get_translated_text('search_title', st.session_state.language))
    st.write("Search for campaigns.")


def explore_page():
    """Renders the explore categories page."""
    load_custom_css('explore')
    st.title(get_translated_text('explore_title', st.session_state.language))
    st.write("Explore campaigns by category.")


def profile_page():
    """Renders the user profile page."""
    load_custom_css('profile')
    st.title(get_translated_text('profile_title', st.session_state.language))
    st.write("Display user profile details.")


def campaign_detail_page(campaign_id):
    """Renders a single campaign detail page."""
    load_custom_css('campaign')
    st.title(f"Campaign Details: {campaign_id}")
    st.write("Display details for a specific campaign.")


def sidebar_navigation():
    """
    Creates the left-side navigation panel with links and a language dropdown.
    """
    with st.sidebar:
        logo_data = load_logo()
        if logo_data:
            st.image(logo_data, use_column_width=True)
        else:
            st.header("HAVEN")

        # Language dropdown
        st.markdown("---")
        st.subheader(get_translated_text('language', st.session_state.language))
        languages = {
            'en': 'English',
            'hi': 'Hindi',
            'ta': 'Tamil',
            'te': 'Telugu'
        }
        
        if 'language' not in st.session_state:
            st.session_state.language = 'en'
        
        selected_language = st.selectbox(
            get_translated_text('select_language', st.session_state.language),
            options=list(languages.keys()),
            format_func=lambda x: languages[x],
            index=list(languages.keys()).index(st.session_state.language)
        )
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.experimental_set_query_params(page=st.session_state.current_page)
            st.rerun()

        # Navigation buttons
        st.markdown("---")
        st.subheader("Navigation")
        if st.button(get_translated_text('trending_nav', st.session_state.language)):
            st.experimental_set_query_params(page='trending')
            st.session_state.current_page = 'trending'
        if st.button(get_translated_text('search_nav', st.session_state.language)):
            st.experimental_set_query_params(page='search')
            st.session_state.current_page = 'search'
        if st.button(get_translated_text('explore_nav', st.session_state.language)):
            st.experimental_set_query_params(page='explore')
            st.session_state.current_page = 'explore'
        if st.button(get_translated_text('profile_nav', st.session_state.language)):
            st.experimental_set_query_params(page='profile')
            st.session_state.current_page = 'profile'

        st.markdown("---")
        if st.button(get_translated_text('logout', st.session_state.language)):
            st.session_state.authenticated = False
            st.experimental_set_query_params(page='login')


# Main application
def main():
    # Initialize session state variables if they don't exist
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'login'

    # Get page from URL parameters
    query_params = st.experimental_get_query_params()
    page = query_params.get('page', ['login'])[0]

    # Route to appropriate page
    if not st.session_state.authenticated and page not in ['login', 'register']:
        page = 'login'
    
    # Display sidebar if authenticated
    if st.session_state.authenticated:
        sidebar_navigation()

    # Page routing logic
    if page == 'login':
        login_page()
    elif page == 'register':
        register_page()
    elif page == 'trending':
        trending_page()
    elif page == 'search':
        search_page()
    elif page == 'explore':
        explore_page()
    elif page == 'profile':
        profile_page()
    elif page.startswith('campaign_'):
        campaign_id = page.split('_')[1]
        campaign_detail_page(campaign_id)
    else:
        # Default to trending if authenticated, login if not
        if st.session_state.authenticated:
            st.experimental_set_query_params(page='trending')
            trending_page()
        else:
            st.experimental_set_query_params(page='login')
            login_page()

if __name__ == "__main__":
    main()
