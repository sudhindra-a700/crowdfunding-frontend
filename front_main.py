# -*- coding: utf-8 -*-
"""HAVEN Crowdfunding Streamlit App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19q5nIlffbHFlcTNPvzWTB3jxvsFDineb
"""

import streamlit as st
import requests
import base64
from datetime import datetime
import json
import os
from urllib.parse import urlencode
import time
import re

# --- Page configuration ---
st.set_page_config(
    page_title="HAVEN - Crowdfunding Platform",
    page_icon="ЁЯПа",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- Environment variables for OAuth and Backend URL ---
# These variables are loaded from the environment, matching the keys in your crowdfunding (3).env file.
BACKEND_URL = os.getenv("BACKEND_URL", "https://haven-fastapi-backend.onrender.com")
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID", "your-google-client-id")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI", f"{BACKEND_URL}/auth/google/callback")
FACEBOOK_CLIENT_ID = os.getenv("FACEBOOK_CLIENT_ID", "your-facebook-app-id")
FACEBOOK_REDIRECT_URI = os.getenv("FACEBOOK_REDIRECT_URI", f"{BACKEND_URL}/auth/facebook/callback")
FRONTEND_BASE_URI = os.getenv("FRONTEND_BASE_URI", "https://haven-streamlit-frontend.onrender.com")


# --- Translation Dictionary and Term Simplification Logic ---
# Placeholder dictionary for translations
# In a real-world scenario, this would be populated by a translation service like IndicTrans2.
TRANSLATIONS = {
    'en': {
        'page_title': "HAVEN - Crowdfunding Platform",
        'tagline': "Help not just some people, but Help Humanity.",
        'home_nav': "Home",
        'trending_title': "Trending Campaigns",
        'search_title': "Search Campaigns",
        'explore_title': "Explore Categories",
        'profile_title': "User Profile",
        'login_title': "Login",
        'register_title': "Register",
        'login_prompt': "Enter Your Email",
        'password_prompt': "Enter Your Password",
        'not_registered': "Not registered?",
        'create_account': "Create an account",
        'or_signin_with': "or you can sign in with",
        'search_nav': "Search",
        'explore_nav': "Explore",
        'language': "Language",
        'select_language': "Select Language",
        'search_placeholder': "Search by keyword, category...",
        'logout': "Logout",
        'create_campaign': "Create Campaign",
        'donation_dashboard': "Donation Dashboard",
        'user_type': "User Type",
        'individual': "Individual",
        'organization': "Organization",
        'full_name': 'Full Name',
        'email_id': 'Email ID',
        'phone_number': 'Phone Number',
        'otp': 'Enter OTP',
        'password': 'Password',
        'confirm_password': 'Confirm Password',
        'address': 'Address',
        'identity_verification': 'Identity Verification (Upload any one):',
        'document_type': 'Document Type',
        'upload_document': 'Upload Document',
        'register_button': 'Register',
        'org_name': 'Organization Name',
        'org_phone': 'Organization Phone Number',
        'org_type': 'Select Organization Type',
        'org_description': 'Brief Description (max 100 chars)',
        'contact_person': 'Contact Person Name',
        'contact_email': 'Contact Email',
        'org_verification': 'Organization Verification (Required):',
        'cert_type': 'Certificate Type',
        'upload_cert': 'Upload Certificate',
        'passwords_not_match': 'Passwords do not match!',
        'day_mode': 'Day Mode',
        'night_mode': 'Night Mode'
    },
    'hi': {
        'page_title': "рд╣реЗрд╡рди - рдХреНрд░рд╛рдЙрдбрдлрдВрдбрд┐рдВрдЧ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо",
        'tagline': "рдХреЗрд╡рд▓ рдХреБрдЫ рд▓реЛрдЧреЛрдВ рдХреА рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ рдорд╛рдирд╡рддрд╛ рдХреА рдорджрдж рдХрд░реЗрдВред",
        'home_nav': "рд╣реЛрдо",
        'trending_title': "рдЯреНрд░реЗрдВрдбрд┐рдВрдЧ рдЕрднрд┐рдпрд╛рди",
        'search_title': "рдЕрднрд┐рдпрд╛рди рдЦреЛрдЬреЗрдВ",
        'explore_title': "рд╢реНрд░реЗрдгрд┐рдпрд╛рдБ рдЦреЛрдЬреЗрдВ",
        'profile_title': "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
        'login_title': "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ",
        'register_title': "рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ",
        'login_prompt': "рдЕрдкрдирд╛ рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ",
        'password_prompt': "рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ",
        'not_registered': "рдкрдВрдЬреАрдХреГрдд рдирд╣реАрдВ рд╣реИрдВ?",
        'create_account': "рдПрдХ рдЦрд╛рддрд╛ рдмрдирд╛рдПрдБ",
        'or_signin_with': "рдпрд╛ рдЖрдк рдЗрд╕рдХреЗ рд╕рд╛рде рд╕рд╛рдЗрди рдЗрди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ",
        'search_nav': "рдЦреЛрдЬ",
        'explore_nav': "рдЦреЛрдЬ",
        'language': "рднрд╛рд╖рд╛",
        'select_language': "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        'search_placeholder': "рдХреАрд╡рд░реНрдб, рд╢реНрд░реЗрдгреА рджреНрд╡рд╛рд░рд╛ рдЦреЛрдЬреЗрдВ...",
        'logout': "рд▓реЙрдЧ рдЖрдЙрдЯ",
        'create_campaign': "рдЕрднрд┐рдпрд╛рди рдмрдирд╛рдПрдБ",
        'donation_dashboard': "рджрд╛рди рдбреИрд╢рдмреЛрд░реНрдб",
        'user_type': "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдХрд╛рд░",
        'individual': "рд╡реНрдпрдХреНрддрд┐рдЧрдд",
        'organization': "рд╕рдВрдЧрдарди",
        'full_name': 'рдкреВрд░рд╛ рдирд╛рдо',
        'email_id': 'рдИрдореЗрд▓ рдЖрдИрдбреА',
        'phone_number': 'рдлрд╝реЛрди рдирдВрдмрд░',
        'otp': 'рдУрдЯреАрдкреА рджрд░реНрдЬ рдХрд░реЗрдВ',
        'password': 'рдкрд╛рд╕рд╡рд░реНрдб',
        'confirm_password': 'рдкрд╛рд╕рд╡рд░реНрдб рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
        'address': 'рдкрддрд╛',
        'identity_verification': 'рдкрд╣рдЪрд╛рди рд╕рддреНрдпрд╛рдкрди (рдХреЛрдИ рднреА рдПрдХ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ):',
        'document_type': 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХрд╛ рдкреНрд░рдХрд╛рд░',
        'upload_document': 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'register_button': 'рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ',
        'org_name': 'рд╕рдВрдЧрдарди рдХрд╛ рдирд╛рдо',
        'org_phone': 'рд╕рдВрдЧрдарди рдХрд╛ рдлреЛрди рдирдВрдмрд░',
        'org_type': 'рд╕рдВрдЧрдарди рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ',
        'org_description': 'рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд┐рд╡рд░рдг (рдЕрдзрд┐рдХрддрдо 100 рд╡рд░реНрдг)',
        'contact_person': 'рд╕рдВрдкрд░реНрдХ рд╡реНрдпрдХреНрддрд┐ рдХрд╛ рдирд╛рдо',
        'contact_email': 'рд╕рдВрдкрд░реНрдХ рдИрдореЗрд▓',
        'org_verification': 'рд╕рдВрдЧрдарди рд╕рддреНрдпрд╛рдкрди (рдЖрд╡рд╢реНрдпрдХ):',
        'cert_type': 'рдкреНрд░рдорд╛рдг рдкрддреНрд░ рдХрд╛ рдкреНрд░рдХрд╛рд░',
        'upload_cert': 'рдкреНрд░рдорд╛рдг рдкрддреНрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'passwords_not_match': 'рдкрд╛рд╕рд╡рд░реНрдб рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреЗ!',
        'day_mode': 'рджрд┐рди рдХрд╛ рдореЛрдб',
        'night_mode': 'рд░рд╛рдд рдХрд╛ рдореЛрдб'
    },
    'ta': {
        'page_title': "ро╣рпЖро╡ройрпН - роХро┐ро░ро╡рпБроЯрпНроГрокрогрпНроЯро┐роЩрпН рокро┐ро│ро╛роЯрпНроГрокро╛ро░рпНроорпН",
        'tagline': "роЪро┐ро▓ро░рпБроХрпНроХрпБ роороЯрпНроЯрпБрооро▓рпНро▓, рооройро┐родроХрпБро▓родрпНродро┐ро▒рпНроХрпЗ роЙродро╡рпБроЩрпНроХро│рпН.",
        'home_nav': "роорпБроХрокрпНрокрпБ",
        'trending_title': "рокро┐ро░рокро▓рооро╛рой рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпН",
        'search_title': "рокро┐ро░роЪрпНроЪро╛ро░роЩрпНроХро│рпИродрпН родрпЗроЯрпБ",
        'explore_title': "рокро┐ро░ро┐ро╡рпБроХро│рпИ роЖро░ро╛ропрпБроЩрпНроХро│рпН",
        'profile_title': "рокропройро░рпН роЪрпБропро╡ро┐ро╡ро░роорпН",
        'login_title': "роЙро│рпНроирпБро┤рпИ",
        'register_title': "рокродро┐ро╡рпБроЪрпЖропрпН",
        'login_prompt': "роЙроЩрпНроХро│рпН рооро┐ройрпНройроЮрпНроЪро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        'password_prompt': "роЙроЩрпНроХро│рпН роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        'not_registered': "рокродро┐ро╡рпБ роЪрпЖропрпНропро╡ро┐ро▓рпНро▓рпИропро╛?",
        'create_account': "роТро░рпБ роХрогроХрпНроХрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        'or_signin_with': "роЕро▓рпНро▓родрпБ роирпАроЩрпНроХро│рпН роЗро╡ро▒рпНро▒рпБроЯройрпН роЙро│рпНроирпБро┤рпИропро▓ро╛роорпН",
        'search_nav': "родрпЗроЯро▓рпН",
        'explore_nav': "роЖро░ро╛ропрпН",
        'language': "роорпКро┤ро┐",
        'select_language': "роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        'search_placeholder': "роорпБроХрпНроХро┐роп ро╡ро╛ро░рпНродрпНродрпИ, ро╡роХрпИрокрпНрокроЯро┐ родрпЗроЯрпБ...",
        'logout': "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
        'create_campaign': "рокро┐ро░роЪрпНроЪро╛ро░родрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХрпБ",
        'donation_dashboard': "роиройрпНроХрпКроЯрпИ роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
        'user_type': "рокропройро░рпН ро╡роХрпИ",
        'individual': "родройро┐роирокро░рпН",
        'organization': "роиро┐ро▒рпБро╡ройроорпН",
        'full_name': 'роорпБро┤рпБ рокрпЖропро░рпН',
        'email_id': 'рооро┐ройрпНройроЮрпНроЪро▓рпН роРроЯро┐',
        'phone_number': 'родрпКро▓рпИрокрпЗроЪро┐ роОрогрпН',
        'otp': 'OTP роР роЙро│рпНро│ро┐роЯро╡рпБроорпН',
        'password': 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпН',
        'confirm_password': 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродрпБ',
        'address': 'роорпБроХро╡ро░ро┐',
        'identity_verification': 'роЕроЯрпИропро╛ро│роЪрпН роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ (роПродрпЗройрпБроорпН роТройрпНро▒рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН):',
        'document_type': 'роЖро╡рог ро╡роХрпИ',
        'upload_document': 'роЖро╡рогродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБ',
        'register_button': 'рокродро┐ро╡рпБроЪрпЖропрпН',
        'org_name': 'роиро┐ро▒рпБро╡ройродрпНродро┐ройрпН рокрпЖропро░рпН',
        'org_phone': 'роиро┐ро▒рпБро╡ройродрпНродро┐ройрпН родрпКро▓рпИрокрпЗроЪро┐ роОрогрпН',
        'org_type': 'роиро┐ро▒рпБро╡рой ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБ',
        'org_description': 'роЪрпБро░рпБроХрпНроХрооро╛рой ро╡ро┐ро│роХрпНроХроорпН (роЕродро┐роХрокроЯрпНроЪроорпН 100 роОро┤рпБродрпНродрпБроХрпНроХро│рпН)',
        'contact_person': 'родрпКроЯро░рпНрокрпБ роирокро░ро┐ройрпН рокрпЖропро░рпН',
        'contact_email': 'родрпКроЯро░рпНрокрпБ рооро┐ройрпНройроЮрпНроЪро▓рпН',
        'org_verification': 'роиро┐ро▒рпБро╡ройроЪрпН роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ (родрпЗро╡рпИ):',
        'cert_type': 'роЪро╛ройрпНро▒ро┐родро┤рпН ро╡роХрпИ',
        'upload_cert': 'роЪро╛ройрпНро▒ро┐родро┤рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБ',
        'passwords_not_match': 'роХроЯро╡рпБроЪрпНроЪрпКро▒рпНроХро│рпН рокрпКро░рпБроирпНродро╡ро┐ро▓рпНро▓рпИ!',
        'day_mode': 'рокроХро▓рпН рокропройрпНроорпБро▒рпИ',
        'night_mode': 'роЗро░ро╡рпБ рокропройрпНроорпБро▒рпИ'
    },
    'te': {
        'page_title': "р░╣р▒Зр░╡р▒Жр░ир▒Н - р░Хр▒Нр░░р▒Мр░бр▒НтАМр░лр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░▓р░╛р░Яр▒НтАМр░лр░╛р░░р░ор▒Н",
        'tagline': "р░Хр▒Кр░Вр░др░ор░Вр░жр░┐р░Хр░┐ р░ор░╛р░др▒Нр░░р░ор▒З р░Хр░╛р░Хр▒Бр░Вр░бр░╛, р░ор░╛р░ир░╡р░др▒Нр░╡р░╛р░ир░┐р░Хр░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Вр░бр░┐.",
        'home_nav': "р░╣р▒Лр░ор▒Н",
        'trending_title': "р░Яр▒Нр░░р▒Жр░Вр░бр░┐р░Вр░Чр▒Н р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р▒Б",
        'search_title': "р░кр▒Нр░░р░Ър░╛р░░р░╛р░▓р░ир▒Б р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐",
        'explore_title': "р░╡р░░р▒Нр░Чр░╛р░▓р░ир▒Б р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐",
        'profile_title': "р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
        'login_title': "р░▓р░╛р░Чр░┐р░ир▒Н",
        'register_title': "р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'login_prompt': "р░ор▒А р░Зр░ор▒Жр░пр░┐р░▓р▒Н р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'password_prompt': "р░ор▒А р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒НтАМр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
        'not_registered': "р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Лр░▓р▒Зр░жр░╛?",
        'create_account': "р░Тр░Х р░Цр░╛р░др░╛р░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐",
        'or_signin_with': "р░▓р▒Зр░жр░╛ р░ор▒Ар░░р▒Б р░жр▒Ар░ир░┐р░др▒Л р░╕р▒Ир░ир▒Н р░Зр░ир▒Н р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б",
        'search_nav': "р░╢р▒Лр░зр░и",
        'explore_nav': "р░Ер░ир▒Нр░╡р▒Зр░╖р░г",
        'language': "р░нр░╛р░╖",
        'select_language': "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        'search_placeholder': "р░Хр▒Ар░▓р░Хр░кр░жр░В, р░╡р░░р▒Нр░Чр░В р░жр▒Нр░╡р░╛р░░р░╛ р░╢р▒Лр░зр░┐р░Вр░Ър░Вр░бр░┐...",
        'logout': "р░▓р░╛р░Чр▒Н р░Ер░╡р▒Бр░Яр▒Н",
        'create_campaign': "р░кр▒Нр░░р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐",
        'donation_dashboard': "р░╡р░┐р░░р░╛р░│р░╛р░▓ р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н",
        'user_type': "р░╡р░┐р░ир░┐р░пр▒Лр░Чр░жр░╛р░░р▒Б р░░р░Хр░В",
        'individual': "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д",
        'organization': "р░╕р░Вр░╕р▒Нр░е",
        'full_name': 'р░кр▒Вр░░р▒Нр░др░┐ р░кр▒Зр░░р▒Б',
        'email_id': 'р░Зр░ор▒Жр░пр░┐р░▓р▒Н р░Рр░бр░┐',
        'phone_number': 'р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н',
        'otp': 'р░Ур░Яр░┐р░кр░┐ р░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
        'password': 'р░кр░╛р░╕р▒Нр░╡р░░р▒Нр░бр▒Н',
        'confirm_password': 'р░кр░╛р░╕р▒Нр░╡р░░р▒Нр░бр▒Нр░ир▒Б р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐',
        'address': 'р░Ър░┐р░░р▒Бр░ир░╛р░ор░╛',
        'identity_verification': 'р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░зр▒Гр░╡р▒Ар░Хр░░р░г (р░Пр░жр▒Ир░ир░╛ р░Тр░Хр░жр░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐):',
        'document_type': 'р░кр░др▒Нр░░р░В р░░р░Хр░В',
        'upload_document': 'р░кр░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'register_button': 'р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
        'org_name': 'р░╕р░Вр░╕р▒Нр░е р░кр▒Зр░░р▒Б',
        'org_phone': 'р░╕р░Вр░╕р▒Нр░е р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н',
        'org_type': 'р░╕р░Вр░╕р▒Нр░е р░░р░Хр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
        'org_description': 'р░╕р░Вр░Хр▒Нр░╖р░┐р░кр▒Нр░д р░╡р░┐р░╡р░░р░г (р░Чр░░р░┐р░╖р▒Нр░Яр░Вр░Чр░╛ 100 р░Ер░Хр▒Нр░╖р░░р░╛р░▓р▒Б)',
        'contact_person': 'р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░кр▒Б р░╡р▒Нр░пр░Хр▒Нр░др░┐ р░кр▒Зр░░р▒Б',
        'contact_email': 'р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░кр▒Б р░Зр░ор▒Жр░пр░┐р░▓р▒Н',
        'org_verification': 'р░╕р░Вр░╕р▒Нр░е р░зр▒Гр░╡р▒Ар░Хр░░р░г (р░Ер░╡р░╕р░░р░В):',
        'cert_type': 'р░╕р░░р▒Нр░Яр░┐р░лр░┐р░Хр▒Зр░Яр▒Н р░░р░Хр░В',
        'upload_cert': 'р░╕р░░р▒Нр░Яр░┐р░лр░┐р░Хр▒Зр░Яр▒НтАМр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        'passwords_not_match': 'р░кр░╛р░╕р▒НтАМр░╡р░░р▒Нр░бр▒НтАМр░▓р▒Б р░╕р░░р░┐р░кр▒Лр░▓р░бр░В р░▓р▒Зр░жр▒Б!',
        'day_mode': 'р░кр░Чр░Яр░┐ р░ор▒Лр░бр▒Н',
        'night_mode': 'р░░р░╛р░др▒Нр░░р░┐ р░ор▒Лр░бр▒Н'
    }
}

# This dictionary simulates a backend service for term simplification.
# In a real app, this would be an API call.
SIMPLIFIED_TERMS = {
    'Crowdfunding': 'A way of raising money from a large number of people, typically via the internet.',
    'Social impact': 'The positive or negative effect of an organization, program, or policy on people and communities.',
    'Sustainability': 'The ability to exist constantly. In business, it means a companyтАЩs ability to operate without negatively impacting the environment.',
    'Philanthropy': 'The desire to promote the welfare of others, typically expressed by the generous donation of money to good causes.',
}

def get_translated_text(key, lang):
    """Retrieves translated text from the dictionary."""
    return TRANSLATIONS.get(lang, TRANSLATIONS['en']).get(key, f"Translation missing for '{key}'")


def process_content_for_simplification(text):
    """
    Scans a text for predefined complex terms and wraps them in an HTML structure
    that creates a tooltip on hover.
    """
    for term, definition in SIMPLIFIED_TERMS.items():
        # Use regex to find and replace the whole word, case-insensitive
        text = re.sub(
            r'\b' + re.escape(term) + r'\b',
            f'<span class="tooltip">{term} <span class="info-icon">i</span><span class="tooltiptext">{definition}</span></span>',
            text,
            flags=re.IGNORECASE
        )
    return text

# --- Utility functions ---
def load_logo():
    """
    Loads the HAVEN logo from the local file system and encodes it as base64.
    A fallback is provided if the file is not found in the specified path.
    """
    try:
        # Assuming the logo is available in the deployment environment
        with open("haven_logo.png", "rb") as f:
            logo_data = f.read()
        return base64.b64encode(logo_data).decode()
    except FileNotFoundError:
        # Fallback if logo file is not found
        return None

def get_profile_image():
    """Placeholder for a user's profile image."""
    return "https://placehold.co/40x40/4CAF50/FFFFFF?text=P"


def load_custom_css():
    """
    Loads custom CSS for the entire app, including theme support and new layout.
    """
    # Using Font Awesome for icons
    st.markdown('<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">', unsafe_allow_html=True)
    st.markdown(f"""
    <style>
    /* Theme variables */
    :root {{
        --day-bg-color: #e8f5e9; /* Light green as requested */
        --day-text-color: #333333;
        --day-card-bg-color: #ffffff;
        --day-nav-bg-color: #ffffff;
        --day-border-color: #e0e0e0;
        --day-secondary-text-color: #757575;

        --night-bg-color: #121212;
        --night-text-color: #e0e0e0;
        --night-card-bg-color: #1e1e1e;
        --night-nav-bg-color: #1e1e1e;
        --night-border-color: #333333;
        --night-secondary-text-color: #a0a0a0;
    }}

    /* Apply theme based on session state */
    .day-mode {{
        background-color: var(--day-bg-color);
        color: var(--day-text-color);
    }}

    .night-mode {{
        background-color: var(--night-bg-color);
        color: var(--night-text-color);
    }}

    /* New main layout using CSS Grid */
    .main-layout {{
        display: grid;
        grid-template-columns: 250px 1fr;
        grid-template-rows: 1fr;
        min-height: 100vh;
        width: 100vw;
    }}

    .sidebar {{
        grid-column: 1 / 2;
        background: var(--{st.session_state.get('theme', 'day')}-nav-bg-color);
        border-right: 1px solid var(--{st.session_state.get('theme', 'day')}-border-color);
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }}
    
    .content-area {{
        grid-column: 2 / 3;
        padding: 20px;
    }}

    .top-right-bar {{
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 15px;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--{st.session_state.get('theme', 'day')}-border-color);
        margin-bottom: 20px;
    }}

    /* --- Sidebar navigation styling --- */
    .sidebar-nav-item {{
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        color: var(--{st.session_state.get('theme', 'day')}-secondary-text-color);
        border-radius: 8px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }}

    .sidebar-nav-item:hover, .sidebar-nav-item.active {{
        background-color: #4CAF50;
        color: white;
    }}

    .sidebar-nav-item.active .nav-icon {{
        color: white;
    }}

    .sidebar-nav-item .nav-icon {{
        font-size: 20px;
        color: var(--{st.session_state.get('theme', 'day')}-secondary-text-color);
    }}

    /* --- Common styling for all pages --- */
    .main .block-container {{
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 100%;
        min-height: 100vh;
    }}
    
    /* User profile and donation icon styling */
    .user-profile-nav {{
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }}
    
    .donation-dashboard-icon {{
        cursor: pointer;
        font-size: 24px;
        color: var(--{st.session_state.get('theme', 'day')}-text-color);
        transition: color 0.3s ease;
    }}
    
    .donation-dashboard-icon:hover {{
        color: #4CAF50;
    }}

    /* Create campaign button styling */
    .create-campaign-button {{
        width: 50px;
        height: 50px;
        background: #FF5252;
        border-radius: 50%;
        border: none;
        color: white;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }}

    .create-campaign-button:hover {{
        transform: scale(1.05);
        box-shadow: 0 6px 15px rgba(0,0,0,0.3);
    }}
    
    /* Card styling */
    .login-card, .register-card, .campaign-card, .category-card {{
        background: var(--{st.session_state.get('theme', 'day')}-card-bg-color);
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        transition: background-color 0.3s ease, color 0.3s ease;
    }}
    
    .login-card {{ max-width: 400px; margin: 0 auto; }}
    .register-card {{ max-width: 800px; margin: 0 auto; }}
    .campaign-card {{ margin: 1rem 0; }}

    .campaign-card:hover {{ transform: translateY(-5px); }}

    .category-card {{
        text-align: center;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: transform 0.3s ease;
    }}

    .category-card:hover {{ transform: translateY(-5px); }}

    .category-icon {{
        font-size: 3rem;
        margin-bottom: 1rem;
    }}

    /* Progress bar styling */
    .progress-container {{
        background: #f0f0f0;
        border-radius: 10px;
        height: 8px;
        margin: 10px 0;
    }}

    .progress-bar {{
        background: linear-gradient(90deg, #4caf50, #8bc34a);
        height: 100%;
        border-radius: 10px;
        transition: width 0.3s ease;
    }}

    /* Tooltip styles for simplification */
    .tooltip {{
        position: relative;
        display: inline-block;
    }}

    .info-icon {{
        background-color: #4CAF50;
        color: white;
        border-radius: 50%;
        width: 18px;
        height: 18px;
        font-size: 12px;
        text-align: center;
        line-height: 18px;
        font-style: normal;
        margin-left: 5px;
        cursor: pointer;
    }}

    .tooltip .tooltiptext {{
        visibility: hidden;
        width: 250px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%; /* Position the tooltip above the text */
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
    }}

    /* Show the tooltip when hovering over the parent span */
    .tooltip:hover .tooltiptext {{
        visibility: visible;
        opacity: 1;
    }}

    /* Typography */
    h1, h2, h3, h4, h5, h6 {{
        color: var(--{st.session_state.get('theme', 'day')}-text-color);
    }}

    p {{
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 1rem;
        color: var(--{st.session_state.get('theme', 'day')}-text-color);
    }}

    a {{
        color: #4caf50;
    }}

    /* Streamlit widget overrides */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea,
    .stFileUploader > div > div,
    .stSelectbox > div > div > div {{
        border-radius: 8px;
        border: 2px solid var(--{st.session_state.get('theme', 'day')}-border-color);
        padding: 12px;
        font-size: 16px;
        background-color: var(--{st.session_state.get('theme', 'day')}-card-bg-color);
        color: var(--{st.session_state.get('theme', 'day')}-text-color);
    }}

    .stButton > button {{
        border-radius: 8px;
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 500;
        border: none;
        transition: all 0.3s ease;
        background: #4CAF50;
        color: white;
    }}

    .stButton > button:hover {{
        transform: translateY(-2px);
        background: #45a049;
    }}

    .stRadio > label {{
        color: var(--{st.session_state.get('theme', 'day')}-text-color);
    }}

    /* Hide Streamlit default elements */
    #MainMenu {{visibility: hidden;}}
    footer {{visibility: hidden;}}
    header {{visibility: hidden;}}
    .stDeployButton {{display: none;}}

    </style>
    """, unsafe_allow_html=True)


def sidebar_navigation():
    """Renders the vertical sidebar navigation for authenticated users."""
    st.markdown('<div class="sidebar">', unsafe_allow_html=True)
    
    st.markdown("<h3>HAVEN</h3>", unsafe_allow_html=True)
    
    st.markdown('<div style="display: flex; flex-direction: column; gap: 10px;">', unsafe_allow_html=True)
    
    nav_items = {
        'trending': ('fa-solid fa-fire', get_translated_text('home_nav', st.session_state.language)),
        'search': ('fa-solid fa-magnifying-glass', get_translated_text('search_nav', st.session_state.language)),
        'explore': ('fa-solid fa-compass', get_translated_text('explore_nav', st.session_state.language)),
    }
    
    for page, (icon, text) in nav_items.items():
        is_active = "active" if st.session_state.current_page == page else ""
        st.markdown(f"""
        <div class="sidebar-nav-item {is_active}" onclick="window.location.href='?page={page}'">
            <i class="nav-icon {icon}"></i>
            <span>{text}</span>
        </div>
        """, unsafe_allow_html=True)
        
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

def top_right_bar():
    """Renders the horizontal top bar with user profile and actions."""
    st.markdown('<div class="top-right-bar">', unsafe_allow_html=True)
    
    # Create Campaign button (organization only)
    if st.session_state.get('user_type') == 'organization':
        if st.button(get_translated_text('create_campaign', st.session_state.language), key="create_campaign_button"):
            st.write("Redirecting to create campaign page...")
    
    # Donation Dashboard icon
    if st.button("ЁЯУЭ", key="donation_dashboard", help="Go to Donation Dashboard"):
        st.experimental_set_query_params(page='donations')
        st.session_state.current_page = 'donations'
        st.rerun()
    
    # User Profile image (clickable)
    profile_img_url = get_profile_image()
    profile_html = f"""
    <div style="cursor: pointer;" onclick="window.location.href = '?page=profile';">
        <img src="{profile_img_url}" class="user-profile-nav" alt="Profile">
    </div>
    """
    st.markdown(profile_html, unsafe_allow_html=True)
    
    language_and_theme_selection()
    
    # Logout button
    if st.button(get_translated_text('logout', st.session_state.language)):
        st.session_state.authenticated = False
        st.session_state.user_type = None
        st.experimental_set_query_params(page='login')
        st.rerun()
        
    st.markdown("</div>", unsafe_allow_html=True)

def language_and_theme_selection():
    """Renders the language and theme selection dropdowns."""
    lang_col, theme_col = st.columns([2, 1])
    
    with lang_col:
        languages = {
            'en': 'English',
            'hi': 'Hindi',
            'ta': 'Tamil',
            'te': 'Telugu'
        }
        
        if 'language' not in st.session_state:
            st.session_state.language = 'en'
        
        selected_language = st.selectbox(
            label=get_translated_text('select_language', st.session_state.language),
            options=list(languages.keys()),
            format_func=lambda x: languages[x],
            index=list(languages.keys()).index(st.session_state.language),
            key="language_dropdown",
            label_visibility="hidden"
        )
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.experimental_set_query_params(page=st.session_state.current_page)
            st.rerun()

    with theme_col:
        if 'theme' not in st.session_state:
            st.session_state.theme = 'day'
        
        theme_options = {'day': 'тШАя╕П', 'night': 'ЁЯМЩ'}
        selected_theme = st.radio(
            "Theme",
            options=list(theme_options.keys()),
            format_func=lambda x: theme_options[x],
            index=list(theme_options.keys()).index(st.session_state.theme),
            key="theme_radio",
            horizontal=True,
            label_visibility="hidden"
        )
        if selected_theme != st.session_state.theme:
            st.session_state.theme = selected_theme
            st.rerun()

def render_logo():
    """Renders the HAVEN logo."""
    logo_data = load_logo()
    if logo_data:
        st.image(f"data:image/png;base64,{logo_data}", width=150)
    else:
        st.markdown(f"<h1>HAVEN</h1>", unsafe_allow_html=True)

# --- Page content functions ---
def login_page():
    """Renders the login page."""
    
    col1, col2, col3 = st.columns([1, 4, 1])
    with col2:
        render_logo()
        st.markdown(
            f"<h2 style='text-align: center; font-style: italic;'>{get_translated_text('tagline', st.session_state.language)}</h2>",
            unsafe_allow_html=True
        )
        
        with st.container():
            st.markdown("<div class='login-card'>", unsafe_allow_html=True)
            st.subheader(get_translated_text('login_title', st.session_state.language))
            email = st.text_input(get_translated_text('login_prompt', st.session_state.language))
            password = st.text_input(get_translated_text('password_prompt', st.session_state.language), type="password")
            
            if st.button(get_translated_text('login_title', st.session_state.language)):
                try:
                    if email and password:
                        st.success("Login successful!")
                        st.session_state.authenticated = True
                        
                        if email == "org@example.com":
                            st.session_state.user_type = "organization"
                        else:
                            st.session_state.user_type = "individual"
                        
                        st.experimental_set_query_params(page='trending')
                        st.rerun()
                    else:
                        st.error("Please enter email and password.")
                except Exception as e:
                    st.error(f"An error occurred: {e}")

            st.markdown(f"---")
            st.markdown(f"<p style='text-align: center;'>{get_translated_text('not_registered', st.session_state.language)} <a href='?page=register' style='color: #42a5f5;'>{get_translated_text('create_account', st.session_state.language)}</a></p>", unsafe_allow_html=True)
            st.markdown(f"<p style='text-align: center;'>{get_translated_text('or_signin_with', st.session_state.language)}</p>", unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            with col1:
                oauth_login_button("google", "Google", "<i class='fa-brands fa-google'></i>")
            with col2:
                oauth_login_button("facebook", "Facebook", "<i class='fa-brands fa-facebook'></i>")
            
            st.markdown("</div>", unsafe_allow_html=True)

def oauth_login_button(provider, text, icon):
    """Create OAuth login button with popup functionality"""
    button_class = f"{provider}-btn oauth-button"
    oauth_url = "#"
    button_html = f"""
    <button class="{button_class}">
        {icon} {text}
    </button>
    """
    st.markdown(button_html, unsafe_allow_html=True)


def register_page():
    """Renders the registration page with forms for individuals and organizations."""
    lang = st.session_state.get('language', 'en')
    
    col1, col2, col3 = st.columns([1, 4, 1])
    with col2:
        render_logo()
        st.markdown('<div class="register-card">', unsafe_allow_html=True)

        st.markdown(f"## {get_translated_text('register_title', lang)}")

        account_type = st.selectbox("Select Account Type", [get_translated_text('individual', lang), get_translated_text('organization', lang)])

        if account_type == get_translated_text('individual', lang):
            st.markdown(f"### {get_translated_text('register_title', lang)} {get_translated_text('individual', lang)}")
            with st.form("individual_register"):
                col_i1, col_i2 = st.columns(2)
                with col_i1:
                    full_name = st.text_input(get_translated_text('full_name', lang), placeholder="R PRAKASH")
                    email = st.text_input(get_translated_text('email_id', lang), placeholder="prakashr00@rediffmail.com")
                    phone = st.text_input(get_translated_text('phone_number', lang), placeholder="09936528585")
                    otp = st.text_input(get_translated_text('otp', lang), placeholder=get_translated_text('otp', lang))

                with col_i2:
                    password = st.text_input(get_translated_text('password', lang), type="password")
                    confirm_password = st.text_input(get_translated_text('confirm_password', lang), type="password")
                    address = st.text_area(get_translated_text('address', lang), placeholder=get_translated_text('address', lang))

                    st.markdown(f"**{get_translated_text('identity_verification', lang)}**")
                    document_type = st.selectbox(get_translated_text('document_type', lang), ["Aadhar Card", "PAN Card", "Passport", "Driving License", "Voter ID"])
                    document_file = st.file_uploader(get_translated_text('upload_document', lang), type=['pdf', 'jpg', 'png'])

                register_btn = st.form_submit_button(get_translated_text('register_button', lang), use_container_width=True)

                if register_btn:
                    if password == confirm_password:
                        st.success(f"{get_translated_text('individual', lang)} {get_translated_text('register_button', lang).lower()} successful! You can now log in.")
                        st.session_state.current_page = "login"
                        st.rerun()
                    else:
                        st.error(get_translated_text('passwords_not_match', lang))

        else: # Organization
            st.markdown(f"### {get_translated_text('register_title', lang)} {get_translated_text('organization', lang)}")
            with st.form("organization_register"):
                col_o1, col_o2 = st.columns(2)
                with col_o1:
                    org_name = st.text_input(get_translated_text('org_name', lang), placeholder=get_translated_text('org_name', lang))
                    org_phone = st.text_input(get_translated_text('org_phone', lang), placeholder=get_translated_text('org_phone', lang))
                    org_type = st.selectbox(get_translated_text('org_type', lang), ["NGO", "Non-Profit", "Social Enterprise", "Charity", "Foundation"])
                    org_description = st.text_area(get_translated_text('org_description', lang), placeholder=get_translated_text('org_description', lang), max_chars=100)

                with col_o2:
                    contact_person = st.text_input(get_translated_text('contact_person', lang))
                    contact_email = st.text_input(get_translated_text('contact_email', lang))
                    password = st.text_input(get_translated_text('password', lang), type="password")
                    confirm_password = st.text_input(get_translated_text('confirm_password', lang), type="password")

                    st.markdown(f"**{get_translated_text('org_verification', lang)}**")
                    cert_type = st.selectbox(get_translated_text('cert_type', lang), ["Certificate of Incorporation", "GST Certificate", "12A Certificate", "80G Certificate", "FCRA Certificate"])
                    cert_file = st.file_uploader(get_translated_text('upload_cert', lang), type=['pdf', 'jpg', 'png'])

                register_btn = st.form_submit_button(get_translated_text('register_button', lang), use_container_width=True)

                if register_btn:
                    if password == confirm_password:
                        st.success(f"{get_translated_text('organization', lang)} {get_translated_text('register_button', lang).lower()} successful! You can now log in.")
                        st.session_state.current_page = "login"
                        st.rerun()
                    else:
                        st.error(get_translated_text('passwords_not_match', lang))

        st.markdown(f"""
        <div style="text-align: center; margin: 20px 0;">
            {get_translated_text('not_registered', lang)} <a href="?page=login" style="color: #4caf50; text-decoration: none;">{get_translated_text('login_title', lang)}</a>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)


def trending_page():
    """Renders the trending campaigns page with term simplification."""
    
    st.title(get_translated_text('trending_title', st.session_state.language))

    sample_text = """
    We are launching a new initiative to promote Sustainability and a positive Social impact in local communities. 
    Our mission is to use Crowdfunding to support various Philanthropy projects.
    """
    
    processed_text = process_content_for_simplification(sample_text)
    
    st.markdown(f"<h3>About this Initiative</h3>", unsafe_allow_html=True)
    st.markdown(f"<p>{processed_text}</p>", unsafe_allow_html=True)

    st.write("Displaying the top trending campaigns.")


def search_page():
    """Renders the search campaigns page."""
    
    st.title(get_translated_text('search_title', st.session_state.language))
    st.write("Search for campaigns.")


def explore_page():
    """Renders the explore categories page."""
    
    st.title(get_translated_text('explore_title', st.session_state.language))
    st.write("Explore campaigns by category.")


def profile_page():
    """Renders the user profile page."""
    
    st.title(get_translated_text('profile_title', st.session_state.language))
    st.write("Display user profile details.")


def campaign_detail_page(campaign_id):
    """Renders a single campaign detail page."""
    
    st.title(f"Campaign Details: {campaign_id}")
    st.write("Display details for a specific campaign.")

def donation_dashboard_page():
    """Renders a placeholder for the donation dashboard."""
    
    st.title(get_translated_text('donation_dashboard', st.session_state.language))
    st.write("This page will show a dashboard of your donations.")

# Main application
def main():
    # Initialize session state variables if they don't exist
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'login'
    if 'user_type' not in st.session_state:
        st.session_state.user_type = None
    if 'theme' not in st.session_state:
        st.session_state.theme = 'day'

    # Get page from URL parameters
    query_params = st.experimental_get_query_params()
    page = query_params.get('page', ['login'])[0]
    st.session_state.current_page = page
    
    # Load custom CSS and set body class
    load_custom_css()
    st.markdown(f'<body class="{st.session_state.theme}-mode">', unsafe_allow_html=True)

    # Logic for authenticated vs unauthenticated layout
    if st.session_state.authenticated:
        # Authenticated users get the new sidebar layout
        st.markdown('<div class="main-layout">', unsafe_allow_html=True)
        sidebar_navigation()
        st.markdown('<div class="content-area">', unsafe_allow_html=True)
        top_right_bar()
        
        # Page routing
        if page == 'login' or page == 'register':
            st.experimental_set_query_params(page='trending')
            trending_page()
        elif page == 'trending':
            trending_page()
        elif page == 'search':
            search_page()
        elif page == 'explore':
            explore_page()
        elif page == 'profile':
            profile_page()
        elif page.startswith('campaign_'):
            campaign_id = page.split('_')[1]
            campaign_detail_page(campaign_id)
        elif page == 'donations':
            donation_dashboard_page()

        st.markdown('</div></div>', unsafe_allow_html=True)
    else:
        # Unauthenticated users get a simplified, centered layout
        if page not in ['login', 'register']:
            st.experimental_set_query_params(page='login')
            page = 'login'
            st.session_state.current_page = 'login'
        
        # Render login/register pages
        if page == 'login':
            login_page()
        elif page == 'register':
            register_page()
            
    st.markdown('</body>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
